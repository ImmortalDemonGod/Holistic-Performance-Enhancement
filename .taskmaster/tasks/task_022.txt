# Task ID: 22
# Title: [Flashcore] Finalize Flashcore CLI Tool (`tm-fc`) with Typer/Click
# Status: pending
# Dependencies: 21, 23
# Priority: medium

# Description:
Create a main entry point `tm-fc` (using Typer or Click) and wrap all completed MVP functionality (card ingest, review sessions, data export, stats) into a unified set of subcommands.

# Details:
1. In `flashcore/cli/main.py`, define the main `tm-fc` Typer application.
2. Implement subcommand `tm-fc ingest`: This will wrap the logic from `ingest_flashcards.py`.
3. Implement subcommand `tm-fc review`: This will call `flashcore.cli.review_ui.start_review_flow` and accept options like `--limit`.
4. Implement subcommand `tm-fc export anki`: This will call the `AnkiExporter`.
5. Implement subcommand `tm-fc export md`: This will call the `MarkdownExporter`.
6. Implement subcommand `tm-fc stats`: Displays basic statistics like total cards and due cards.
7. Ensure `--help` messages are clear for all commands and subcommands.
8. Configure `pyproject.toml` to make `tm-fc` an installable script/entry point.

# Test Strategy:
• Manual testing of all subcommands and their options (e.g., `tm-fc --help`, `tm-fc review --limit 10`, `tm-fc export anki --output-path ...`).
• Verify that each subcommand correctly invokes the underlying logic (review manager, exporters, ingest script) and produces the expected output or behavior.
• Test error handling for invalid subcommands or options.
• Verify `pyproject.toml` script installation.

# HPE Learning Meta (Main Task):
    Task objective summary: To finalize the `tm-fc` CLI tool by integrating all core MVP functionalities (ingest, review, export, stats) into a single, cohesive interface.
    Estimated effort tshirt: M
    Estimated effort hours raw: 5-8h
    Estimated effort hours min: 5
    Estimated effort hours max: 8
    Completion criteria summary: `tm-fc` command is installable and provides fully working subcommands for `ingest`, `review`, `export`, and `stats`. Help messages are functional.
    Activity type: cli_development_integration
    Recommended block: focused_dev_block
# Subtask Details:

## Subtask 22.1: Setup main CLI structure with Typer
Description: Create `flashcore/cli/main.py` with the basic `tm-fc` app structure and `pyproject.toml` entry point.
Dependencies: None
Status: pending
Risks: Dependency conflicts with Typer or its dependencies.
Mitigation: Add `typer[all]` to `requirements.txt` and run `pip check` to ensure a clean environment.

## Subtask 22.2: Implement `ingest` and `stats` subcommands
Description: Wrap the existing ingest script and use ReviewSessionManager for stats.
Dependencies: 1
Status: pending
Risks: Not specified
Mitigation: Not specified

## Subtask 22.3: Implement `review` subcommand
Description: Integrate the review UI flow (from Task 21) into a subcommand, with options like `--limit`.
Dependencies: 1
Status: pending
Risks: Passing options like `--limit` to the underlying `ReviewSessionManager` requires modifying its `start_session` method, which could be a breaking change.
Mitigation: Carefully refactor `ReviewSessionManager` to accept optional filter parameters and update its tests accordingly.

## Subtask 22.4: Implement `export` subcommand group
Description: Create the `export` group with `anki` and `md` sub-subcommands calling the completed exporters.
Dependencies: 1
Status: pending
Risks: Not specified
Mitigation: Not specified

## Subtask 22.5: Add comprehensive --help messages and conduct manual E2E testing
Description: Ensure all commands and subcommands have clear help text and perform thorough manual testing of the full CLI.
Dependencies: 2, 3, 4
Status: pending
Risks: Not specified
Mitigation: Not specified
