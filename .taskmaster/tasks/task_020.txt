# Task ID: 20
# Title: [Flashcore] Implement `ReviewSessionManager` in flashcore/review_manager.py
# Status: done
# Dependencies: 19
# Priority: high

# Description:
Develop the backend logic to manage a review session. This involves fetching due cards from the `FlashcardDatabase`, using the FSRS scheduler for updates, and saving review results.

# Details:
1. Define `ReviewSessionManager` class in `flashcore/review_manager.py`.
2. Constructor `__init__(self, db: FlashcardDatabase)`.
3. Method `start_session(self, limit: int = 20) -> None`: fetches due cards using `db.get_due_cards` and populates an internal queue.
4. Method `get_next_card(self) -> Optional[Card]`: returns the next card from the queue or None.
5. Method `submit_review(self, card_uuid: UUID, rating: int, resp_ms: Optional[int]) -> Review`: retrieves card history from `db`, calls the FSRS scheduler, constructs a new `Review` object, and saves it to the `db` via `db.add_review()`.
6. Method `get_due_card_count(self) -> int`: returns the total number of cards currently due for review.

# Test Strategy:
• Unit tests in `tests/flashcore/test_review_manager.py` using pytest and mocks for `FlashcardDatabase` and `FSRS_Scheduler`.
  - `start_session`: verify `db.get_due_cards` is called correctly.
  - `submit_review`: mock scheduler return values, verify `db.add_review` is called with a correctly constructed `Review` object.
• Integration test using an in-memory `FlashcardDatabase`.

# HPE Learning Meta (Main Task):
    Task objective summary: Develop the backend logic for managing flashcard review sessions, including fetching cards, processing reviews, and updating card states.
    Estimated effort tshirt: L
    Estimated effort hours raw: 8-12h
    Estimated effort hours min: 8
    Estimated effort hours max: 12
    Completion criteria summary: ReviewSessionManager correctly fetches due cards, processes reviews using FSRS, updates card data, and has comprehensive unit tests.
    Activity type: application_logic_development
    Recommended block: deep_work
    Deliverables: ['flashcore/review_manager.py', 'tests/flashcore/test_review_manager.py']
# Subtask Details:

## Subtask 20.1: Define ReviewSessionManager class structure
Description: Create the `ReviewSessionManager` class with its constructor and internal state attributes (e.g., `self.db`, `self.scheduler`, `self.review_queue`).
Dependencies: None
Status: done
Risks: Not specified
Mitigation: Not specified

## Subtask 20.2: Implement `start_session` and `get_next_card` methods
Description: Develop the logic to fetch due cards and manage the session queue.
Dependencies: 1
Status: done
Risks: The `db.get_due_cards` query might be slow for a very large database.
Mitigation: Ensure the underlying database query is indexed and optimized. For now, accept the performance as-is for the MVP.

## Subtask 20.3: Implement `submit_review` method
Description: Develop the core logic to update a card's state after a review, integrating with the FSRS scheduler and database.
Dependencies: 1
Status: done
Risks: Incorrectly calculating `elapsed_days_at_review` passed to FSRS, leading to scheduling errors.
Mitigation: Write a specific helper function for this calculation that handles both first-time reviews (delta from `card.added_at`) and subsequent reviews (delta from previous `review.ts`). Cover these cases in unit tests.
Implementation Steps:
  1. 1. Fetch the card's full review history from the database.
  2. 2. Calculate `elapsed_days_at_review` based on the history.
  3. 3. Instantiate `FSRS_Scheduler` and call `compute_next_state`.
  4. 4. Construct a new `Review` Pydantic model with all required fields from the card and scheduler output.
  5. 5. Call `db.add_review` to persist the new review object.

## Subtask 20.4: Implement `get_due_card_count` method
Description: Develop the method to return the count of due cards.
Dependencies: 1
Status: done
Risks: Not specified
Mitigation: Not specified

## Subtask 20.5: Write unit and integration tests for ReviewSessionManager
Description: Create tests in `tests/flashcore/test_review_manager.py` covering all methods and edge cases, using mocks and an in-memory DB.
Dependencies: 2, 3, 4
Status: done
Risks: Mocks for the database and scheduler become overly complex and brittle.
Mitigation: Prioritize a full integration test using an in-memory DuckDB instance to validate the end-to-end flow, reducing reliance on complex mocks for the core `submit_review` logic.
