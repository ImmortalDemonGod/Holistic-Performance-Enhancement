# Task ID: 21
# Title: [Flashcore] Develop Review UI (CLI MVP) in `flashcore.cli.review_ui`
# Status: pending
# Dependencies: 20
# Priority: high

# Description:
Create a command-line interface (CLI) for users to review flashcards. This UI will interact with the `ReviewSessionManager` to fetch cards and submit review outcomes.

# Details:
1. In `flashcore/cli/review_ui.py`, define a function `start_review_flow(manager: ReviewSessionManager)`.
2. Call `manager.start_session()` to load due cards.
3. Loop while `manager.get_next_card()` returns a card:
   a. Display card front content (e.g., `card.front`).
   b. Prompt user to show answer (e.g., press Enter).
   c. Display card back content (e.g., `card.back`).
   d. Prompt user for rating (e.g., 1:Again, 2:Hard, 3:Good, 4:Easy). Validate input.
   e. Record response time (optional, `resp_ms`).
   f. Call `manager.submit_review(card.uuid, rating, resp_ms)`.
   g. Display next review date or feedback.
4. Handle cases: no due cards, session completion.
5. Provide clear instructions and progress indicators (e.g., 'Card X of Y').

# Test Strategy:
• Manual testing: Run the CLI flow with a `ReviewSessionManager` connected to a test database.
  - Verify card presentation, rating input, and session progression.
  - Check behavior with no due cards and after completing all cards.
• Unit tests in `tests/cli/test_review_ui.py` (using `pytest-mock` for `ReviewSessionManager`):
  - Test card display and rating input loop.
  - Test session start/completion messages.

# HPE Learning Meta (Main Task):
    Task objective summary: Build an interactive CLI for users to review their flashcards, providing ratings and seeing session progress.
    Estimated effort tshirt: M
    Estimated effort hours raw: 6-10h
    Estimated effort hours min: 6
    Estimated effort hours max: 10
    Completion criteria summary: CLI allows users to review a session of cards, input ratings, and see these persisted via ReviewSessionManager; basic progress and instructions are clear.
    Activity type: ui_development_cli
    Recommended block: deep_work
    Deliverables: ['flashcore/cli/review_ui.py', 'tests/cli/test_review_ui.py']
# Subtask Details:

## Subtask 21.1: Design basic CLI interaction flow
Description: Outline the sequence of prompts, card display, and user inputs for a single card review cycle.
Dependencies: None
Status: pending
Risks: The interaction flow is clunky or unintuitive.
Mitigation: Sketch the flow on paper first, simulating a user session. Prioritize clarity and minimal required keystrokes.

## Subtask 21.2: Implement card content display
Description: Write code to present the front and back content, potentially using the `rich` library for better rendering.
Dependencies: 1
Status: pending
Risks: Complex Markdown or KaTeX in cards breaks terminal rendering.
Mitigation: Use `rich.markdown.Markdown` which handles many cases gracefully. For unsupported elements, showing the raw Markdown/KaTeX is an acceptable fallback for the MVP.

## Subtask 21.3: Implement rating input and processing
Description: Write code to prompt for a rating (1-4), validate it, and call `ReviewSessionManager.submit_review`.
Dependencies: 2
Status: pending
Risks: User enters invalid input (e.g., 'text', 5), crashing the program.
Mitigation: Implement a robust input validation loop that handles non-integer input and out-of-range numbers, re-prompting the user with a clear error message.

## Subtask 21.4: Implement main session loop
Description: Develop the main loop to iterate through all due cards fetched by the `ReviewSessionManager`, showing session progress.
Dependencies: 1
Status: pending
Risks: Not specified
Mitigation: Not specified

## Subtask 21.5: Add session boundary messages and error handling
Description: Implement clear messages for starting a session, completing a session, and handling the case where there are no cards due.
Dependencies: 4
Status: pending
Risks: Not specified
Mitigation: Not specified
