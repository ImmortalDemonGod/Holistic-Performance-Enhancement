{
  "master": {
    "tasks": [
      {
        "id": 13,
        "title": "P1.W1.Day1 Passive: Intro to Nucleotides (Reading & Initial Notes)",
        "description": "Focused reading on RNA nucleotide components (phosphate, ribose, bases) and creating initial notes/flashcards.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Refer to CSM Day 1, Passive Block, Task 1.A. Read relevant sections from chosen resources on nucleotide structure. Summarize key concepts. Start creating flashcards for basic definitions.",
        "testStrategy": "Key concepts of nucleotide structure noted. Initial flashcards for base definitions created.",
        "subtasks": [],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Day1.Passive.NucleotideIntro",
          "anchor_link": "#day-1-e-g-monday---focus-orientation--initial-biochemistry-dive"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Gain initial understanding of RNA nucleotide components through focused reading and note-taking.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "1.0-1.5 hours",
          "estimated_effort_hours_min": 1,
          "estimated_effort_hours_max": 1.5,
          "mastery_criteria_summary": "Completed reading on nucleotide structure. Initial notes and basic flashcards created.",
          "activity_type": "focused_reading_initial_notetaking_flashcard_creation",
          "recommended_block": "passive_review",
          "deliverables": [
            "Initial notes on nucleotide structure.",
            "First batch of basic definition flashcards."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 1,
          "curriculum_part_title": "Day 1 Passive: Nucleotide Introduction",
          "csm_tags": [
            "rna_modeling",
            "biochemistry",
            "nucleotides",
            "initial_reading",
            "day1_passive"
          ]
        },
        "labels": [
          "passive",
          "reading",
          "notetaking",
          "flashcard_creation",
          "rna_modeling",
          "biochemistry",
          "nucleotides",
          "week1",
          "day1",
          "curriculum-aligned"
        ]
      },
      {
        "id": 1,
        "title": "Set up RNA Biophysics Knowledge Base Structure",
        "description": "Create the initial knowledge base structure for organizing RNA biochemistry and thermodynamics concepts, including sections for notes, diagrams, and summaries.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Create a dedicated section in your personal knowledge management system (e.g., Obsidian, Notion, or local Markdown files) titled 'Pillar 1 Foundations: RNA Biochemistry & Thermodynamics'. Set up subsections for: 1) RNA Nucleotide Structure, 2) Phosphodiester Backbone, 3) RNA vs DNA Comparison, 4) Thermodynamic Principles, 5) Energetic Contributions to RNA Stability, and 6) Environmental Factors. Include placeholder files for diagrams, explanations, and quiz materials.",
        "testStrategy": "Verify the knowledge base structure is complete with all required sections and placeholder files. Ensure the organization follows a logical progression that supports the learning objectives.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Main Knowledge Base Structure and Root Section",
            "description": "Set up the main knowledge base folder/section and create the root 'Pillar 1 Foundations: RNA Biochemistry & Thermodynamics' section with an index or overview document",
            "dependencies": [],
            "details": "1. Choose and prepare your knowledge management system (Obsidian, Notion, or local Markdown files)\n2. Create a main folder/section for the RNA Biophysics Knowledge Base\n3. Create a root document titled 'Pillar 1 Foundations: RNA Biochemistry & Thermodynamics'\n4. In the root document, write a brief overview describing the purpose and scope of this pillar\n5. Create a table of contents that will link to each subsection\n6. Add metadata tags for easy reference and searching (e.g., #RNA, #biophysics, #foundations)\n7. Test by ensuring the root document is properly saved and accessible",
            "status": "done",
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Establish Six Core Subsections with Folder Structure",
            "description": "Create the six required subsections as separate folders/sections with index documents for each topic area",
            "dependencies": [
              1
            ],
            "details": "1. Within the main Pillar 1 folder, create six separate folders/sections titled:\n   - 1.1 RNA Nucleotide Structure\n   - 1.2 Phosphodiester Backbone\n   - 1.3 RNA vs DNA Comparison\n   - 1.4 Thermodynamic Principles\n   - 1.5 Energetic Contributions to RNA Stability\n   - 1.6 Environmental Factors\n2. For each subsection, create an index document that briefly describes the topic and its importance\n3. Update the root document's table of contents with links to each subsection\n4. Add consistent metadata tags to each subsection for organization\n5. Test by navigating between the main index and each subsection to verify links work correctly",
            "status": "done",
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "Create Content Template Files for Each Subsection",
            "description": "Develop and implement standardized template files for notes, diagrams, and explanations within each subsection",
            "dependencies": [
              2
            ],
            "details": "1. Design a standardized template format for three types of content:\n   - Notes template (with headers for key concepts, definitions, and references)\n   - Diagram placeholder (with instructions for diagram types needed)\n   - Explanation template (with sections for detailed explanations and examples)\n2. For each of the six subsections, create these three template files\n3. Name files consistently (e.g., '1.1-Notes.md', '1.1-Diagrams.md', '1.1-Explanations.md')\n4. Add placeholder text in each file describing the expected content\n5. Include metadata and tagging consistent with the knowledge base structure\n6. Test by opening each file to verify template structure is consistent and properly formatted",
            "status": "done",
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "Develop Quiz and Assessment Materials Structure",
            "description": "Create a dedicated quiz/assessment section with templates for self-testing materials for each topic",
            "dependencies": [
              2
            ],
            "details": "1. Create a 'Quizzes and Assessments' folder within the Pillar 1 section\n2. Design a standardized quiz template with sections for:\n   - Multiple choice questions\n   - Short answer questions\n   - Diagram interpretation exercises\n   - Problem-solving scenarios\n3. Create six quiz template files, one for each subsection (e.g., 'Quiz-1.1-RNA-Nucleotide-Structure.md')\n4. Add placeholder questions in each quiz file related to the corresponding topic\n5. Create an index file for the quiz section explaining how to use the materials\n6. Link the quiz section in the main Pillar 1 index document\n7. Test by reviewing each quiz template for consistency and proper formatting",
            "status": "done",
            "parentTaskId": 1
          },
          {
            "id": 5,
            "title": "Implement Cross-References and Learning Progression Structure",
            "description": "Organize sections in a logical learning sequence and add cross-references between related concepts across subsections",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "1. Review all created sections and reorder if necessary to ensure logical learning progression\n2. Update the main index document to include a suggested learning path through the materials\n3. Create a 'Cross-References' section in each subsection index document\n4. Identify and document relationships between topics (e.g., how RNA structure affects thermodynamic properties)\n5. Add bidirectional links between related concepts across different subsections\n6. Create a visual concept map document showing relationships between all topics\n7. Verify the entire knowledge base structure by:\n   - Checking all links work correctly\n   - Confirming all required sections and placeholders exist\n   - Testing navigation through the suggested learning path\n   - Ensuring consistent formatting and naming conventions throughout",
            "status": "done",
            "parentTaskId": 1
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Task0",
          "anchor_link": "#task-0-setup-planning--hpe-integration-day-1---approx-1-15-hours"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Orient to Week 1 learning, prepare the learning environment, and set up Task Master & flashcard system for RNA foundations topics.",
          "estimated_effort_tshirt": "S",
          "estimated_effort_hours_raw": "1-1.5 hours",
          "estimated_effort_hours_min": 1,
          "estimated_effort_hours_max": 1.5,
          "mastery_criteria_summary": "Task Master entries for Week 1 created. Knowledge base section for 'Pillar 1 Foundations' initialized. Flashcard authoring environment ready.",
          "activity_type": "planning_setup",
          "recommended_block": "active_learning",
          "deliverables": [
            "Task Master entries created for the week.",
            "Knowledge base section for 'Pillar 1 Foundations' initialized."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 1,
          "curriculum_part_title": "Task 0: Setup, Planning & HPE Integration",
          "csm_tags": [
            "hpe_integration",
            "planning",
            "setup",
            "rna_foundations",
            "week1_orientation"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:1",
          "activity:planning_setup",
          "block:active_learning",
          "effort_tshirt:S"
        ]
      },
      {
        "id": 2,
        "title": "Develop RNA Nucleotide Structure Materials",
        "description": "Create comprehensive materials on RNA nucleotide structure, including diagrams of nucleotide components and base structures.",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Draw and label a generic RNA nucleotide showing the phosphate group, ribose sugar (with numbered carbons 1'-5'), and placeholder for the base. Highlight the critical 2'-hydroxyl group. Create detailed chemical structures of the four standard RNA bases (Adenine, Guanine, Cytosine, Uracil) and identify them as purines or pyrimidines. Include notes on nucleosides vs. nucleotides and the chemical properties of each component. Create flashcards for key terms, chemical structures, and important distinctions.",
        "testStrategy": "Review drawings for accuracy and completeness. Verify all components are correctly labeled and the 2'-OH group is explicitly highlighted. Confirm that the base structures are chemically accurate and properly classified as purines or pyrimidines.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create detailed diagram of a generic RNA nucleotide structure",
            "description": "Draw and label a comprehensive diagram of a generic RNA nucleotide showing all key components with proper labeling and highlighting of distinctive features.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Create a clear, chemically accurate drawing of a generic RNA nucleotide with:\n   - Phosphate group (labeled with P)\n   - Ribose sugar ring (properly oriented)\n   - Numbered carbon atoms (1'-5') on the ribose\n   - A placeholder for the nitrogenous base attached at the 1' position\n   - Highlight the 2'-hydroxyl group that distinguishes RNA from DNA\n2. Use standard chemical notation for bonds, atoms, and functional groups\n3. Add clear labels with leader lines for each component\n4. Include a title and brief caption explaining the diagram\n5. Test by having someone with biochemistry knowledge verify accuracy and completeness of the structure",
            "status": "pending",
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Develop detailed structures of the four RNA bases",
            "description": "Create chemically accurate diagrams of the four standard RNA bases (Adenine, Guanine, Cytosine, Uracil) with proper classification and labeling.",
            "dependencies": [
              1
            ],
            "details": "Implementation steps:\n1. Draw detailed chemical structures for each of the four RNA bases:\n   - Adenine (A) - with proper purine ring structure\n   - Guanine (G) - with proper purine ring structure\n   - Cytosine (C) - with proper pyrimidine ring structure\n   - Uracil (U) - with proper pyrimidine ring structure\n2. Label each structure with its full name and single-letter abbreviation\n3. Group and label bases as purines (A, G) or pyrimidines (C, U)\n4. For each base, indicate the attachment point to the ribose (N9 for purines, N1 for pyrimidines)\n5. Include hydrogen bond donor and acceptor sites important for base pairing\n6. Test by comparing to standard biochemistry references and having an expert verify accuracy",
            "status": "pending",
            "parentTaskId": 2
          },
          {
            "id": 3,
            "title": "Write explanatory notes on nucleotide chemistry and properties",
            "description": "Create comprehensive notes explaining the chemical properties of RNA nucleotide components and the distinction between nucleosides and nucleotides.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implementation steps:\n1. Write clear explanations of:\n   - The difference between nucleosides (base + sugar) and nucleotides (base + sugar + phosphate)\n   - Chemical properties of the phosphate group (negative charge, role in backbone formation)\n   - Properties of the ribose sugar (chirality, reactivity of the 2'-OH group)\n   - Chemical characteristics of purine vs. pyrimidine bases\n   - Hydrogen bonding capabilities of each base\n2. Include information on the nomenclature system used for RNA nucleotides\n3. Explain the significance of the 2'-hydroxyl group in RNA function and stability\n4. Add notes on tautomeric forms of bases and their biological significance\n5. Include a section on modified RNA bases found in nature\n6. Test by having a biochemistry student review for clarity and accuracy",
            "status": "pending",
            "parentTaskId": 2
          },
          {
            "id": 4,
            "title": "Create educational flashcards for RNA nucleotide structures",
            "description": "Develop a comprehensive set of educational flashcards covering key terms, chemical structures, and important distinctions related to RNA nucleotides.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Implementation steps:\n1. Design a template for flashcards with clear front/back format\n2. Create flashcards for the following categories:\n   - Structure identification (image of structure on front, name and key features on back)\n   - Key terms (term on front, definition on back)\n   - Comparisons (e.g., 'Difference between nucleoside and nucleotide?' on front, explanation on back)\n   - Base classification (base structure on front, classification and properties on back)\n3. Include at least 20 flashcards covering all essential concepts\n4. Ensure each flashcard has a clear learning objective\n5. Format flashcards for both digital use and printing\n6. Test by having students use the flashcards and provide feedback on clarity and usefulness",
            "status": "pending",
            "parentTaskId": 2
          },
          {
            "id": 5,
            "title": "Review and finalize all RNA nucleotide structure materials",
            "description": "Conduct a comprehensive review of all created materials for accuracy, clarity, consistency, and educational effectiveness.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Implementation steps:\n1. Systematically review all diagrams for:\n   - Chemical accuracy (bond angles, atom positions, functional groups)\n   - Clarity of labeling and annotations\n   - Consistency across all materials\n   - Visual quality and readability\n2. Review all written explanations for:\n   - Scientific accuracy\n   - Clarity and appropriate level of detail\n   - Logical flow of information\n   - Absence of contradictions or ambiguities\n3. Have at least one subject matter expert review all materials\n4. Test materials with the target audience (e.g., students) and collect feedback\n5. Make necessary revisions based on all feedback\n6. Compile final materials into a cohesive package with table of contents and consistent formatting\n7. Test final materials by having someone learn RNA nucleotide structure using only these materials",
            "status": "pending",
            "parentTaskId": 2
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part1.Biochem.NucleotideStructure",
          "anchor_link": "#part-1-mastering-rna-biochemistry-fundamentals-days-1-3---approx-4-5-hours-total-study--activity-time"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Master the chemical composition of RNA nucleotides, accurately draw generic nucleotide and base structures, and create related explanatory notes and flashcards.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "1.5-2 hours",
          "estimated_effort_hours_min": 1.5,
          "estimated_effort_hours_max": 2,
          "mastery_criteria_summary": "Accurate drawings of generic RNA nucleotide and the four standard RNA bases. Comprehensive notes covering components, properties, and nucleoside/nucleotide distinction. Initial flashcards for structures and terms created.",
          "activity_type": "drawing_diagramming_notetaking_flashcard_creation",
          "recommended_block": "active_learning",
          "deliverables": [
            "Completed drawing of a generic RNA nucleotide (Task 1.1 from PRD).",
            "Completed detailed chemical structures of Adenine, Guanine, Cytosine, and Uracil (Task 1.2 from PRD).",
            "Notes on nucleosides vs. nucleotides and chemical properties of components.",
            "Initial batch of flashcards for nucleotide structures and related terms."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 1,
          "curriculum_part_title": "Part 1: RNA Biochemistry - Nucleotide & Base Structures",
          "csm_tags": [
            "rna_modeling",
            "biochemistry",
            "nucleotides",
            "chemical_structure",
            "purines",
            "pyrimidines"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:1",
          "activity:drawing",
          "activity:notetaking",
          "activity:flashcards",
          "block:active_learning",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 3,
        "title": "Document RNA Polymer Structure and Backbone",
        "description": "Create materials explaining the phosphodiester backbone, RNA directionality, and polymer structure.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "high",
        "details": "Draw a short RNA dinucleotide (e.g., A-U) showing and labeling the 5'-3' phosphodiester bond, the 5' end, and the 3' end. Document the formation of the phosphodiester backbone, including the directionality of an RNA strand and its implications. Include notes on the overall charge and properties of the backbone. Create a concise explanation of why RNA's 5'-to-3' directionality matters functionally and structurally. Develop flashcards for phosphodiester bond characteristics and RNA directionality concepts.",
        "testStrategy": "Verify the dinucleotide drawing shows correct linkage between nucleotides with properly labeled 5' and 3' ends. Check that the explanation of directionality is clear and accurate. Ensure flashcards effectively capture key concepts about the phosphodiester backbone.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Detailed Illustration of RNA Dinucleotide",
            "description": "Produce a clear, labeled illustration of an A-U dinucleotide showing the phosphodiester bond and directional elements",
            "dependencies": [],
            "details": "1. Draw an adenine (A) and uracil (U) nucleotide connected by a phosphodiester bond\n2. Clearly label the following components:\n   - The 5' end (phosphate group)\n   - The 3' end (hydroxyl group)\n   - The phosphodiester bond connecting the nucleotides\n   - Ribose sugar components\n   - Nitrogenous bases (adenine and uracil)\n   - Phosphate groups\n3. Use color coding to distinguish different molecular components\n4. Include a small legend explaining the color scheme\n5. Ensure chemical accuracy in bond angles and molecular structures\n6. Create both a detailed technical version and a simplified schematic version\n7. Test by having a colleague with biochemistry knowledge verify accuracy",
            "status": "pending",
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Document Phosphodiester Backbone Formation and Properties",
            "description": "Create comprehensive documentation on the formation, structure, and properties of the RNA phosphodiester backbone",
            "dependencies": [
              1
            ],
            "details": "1. Explain the chemical reaction that forms phosphodiester bonds between nucleotides\n2. Document the step-by-step process of RNA polymerization\n3. Describe the overall negative charge of the backbone and explain its source\n4. Detail key physical properties of the backbone:\n   - Stability in various pH conditions\n   - Susceptibility to hydrolysis compared to DNA\n   - Structural flexibility\n5. Include diagrams showing how multiple phosphodiester bonds form the backbone\n6. Reference the illustration from subtask 1 to show how individual bonds contribute to the overall structure\n7. Create a table summarizing backbone properties\n8. Test by verifying against current biochemistry textbooks and having a subject matter expert review",
            "status": "pending",
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Explain RNA 5'-to-3' Directionality Significance",
            "description": "Develop a clear explanation of why RNA's directional structure matters functionally and structurally",
            "dependencies": [
              1,
              2
            ],
            "details": "1. Define what 5'-to-3' directionality means in practical terms\n2. Explain the functional significance of directionality in:\n   - RNA synthesis (transcription)\n   - Translation processes\n   - Interaction with ribosomes and other cellular machinery\n   - RNA degradation mechanisms\n3. Describe structural implications of directionality:\n   - Impact on secondary structure formation\n   - Influence on tertiary structure\n   - Effects on RNA-protein interactions\n4. Include specific examples of how directionality affects RNA function in biological systems\n5. Create a diagram showing how directionality influences RNA folding\n6. Test by having biology students review for clarity and comprehension",
            "status": "pending",
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Develop Educational Flashcards on RNA Structure",
            "description": "Create a comprehensive set of flashcards covering phosphodiester bonds and RNA directionality concepts",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "1. Design 15-20 flashcards covering key concepts:\n   - Phosphodiester bond formation and structure\n   - RNA backbone properties\n   - 5'-to-3' directionality\n   - Functional significance of RNA structure\n   - Common misconceptions about RNA structure\n2. Format each flashcard with:\n   - A clear question or prompt on front\n   - A concise answer with a small diagram where helpful on back\n   - Reference to more detailed materials\n3. Include cards with both recall questions and application problems\n4. Organize cards in a logical learning sequence\n5. Create digital versions (PDF and interactive format)\n6. Test flashcards with students or colleagues to verify effectiveness\n7. Revise based on feedback for clarity and educational value",
            "status": "pending",
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Compile and Review Complete RNA Structure Documentation",
            "description": "Assemble all materials into a cohesive educational package and conduct comprehensive review",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "1. Compile all materials from previous subtasks into a unified document/package\n2. Create a table of contents and consistent formatting throughout\n3. Add cross-references between related sections\n4. Develop a glossary of key terms\n5. Conduct a thorough review process:\n   - Check for scientific accuracy against current literature\n   - Verify consistency in terminology throughout all materials\n   - Review for pedagogical effectiveness and clarity\n   - Have at least two subject matter experts review content\n   - Test materials with the intended audience (students/learners)\n6. Make revisions based on feedback\n7. Finalize materials in multiple formats (print-ready PDF, web-based interactive version, presentation slides)\n8. Create a brief instructor guide with suggestions for using the materials",
            "status": "pending",
            "parentTaskId": 3
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part1.Biochem.BackboneDirectionality",
          "anchor_link": "#part-1-mastering-rna-biochemistry-fundamentals-days-1-3---approx-4-5-hours-total-study--activity-time"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Explain phosphodiester backbone formation, RNA 5'-3' directionality, its implications, and illustrate with a dinucleotide drawing.",
          "estimated_effort_tshirt": "S",
          "estimated_effort_hours_raw": "1-1.5 hours",
          "estimated_effort_hours_min": 1,
          "estimated_effort_hours_max": 1.5,
          "mastery_criteria_summary": "Accurate drawing of an A-U dinucleotide showing phosphodiester bond and 5'/3' ends (Task 1.3 PRD). Clear explanation of directionality and backbone properties. Flashcards created.",
          "activity_type": "drawing_explanation_writing_flashcard_creation",
          "recommended_block": "active_learning",
          "deliverables": [
            "Drawing of A-U dinucleotide with labeled 5'-3' phosphodiester bond, 5' end, and 3' end (Task 1.3 PRD).",
            "Documentation on phosphodiester backbone formation and its properties (charge, etc.).",
            "Explanation of RNA 5'-to-3' directionality significance.",
            "Flashcards for phosphodiester bond characteristics and RNA directionality."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 2,
          "curriculum_part_title": "Part 1: RNA Biochemistry - Polymer Structure & Backbone",
          "csm_tags": [
            "rna_modeling",
            "biochemistry",
            "phosphodiester_backbone",
            "directionality",
            "polymer_structure"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:2",
          "activity:drawing",
          "activity:explanation_writing",
          "activity:flashcards",
          "block:active_learning",
          "effort_tshirt:S"
        ]
      },
      {
        "id": 4,
        "title": "Develop RNA vs. DNA Comparison Materials",
        "description": "Create detailed comparison materials highlighting the structural and functional differences between RNA and DNA.",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "details": "Write a comprehensive comparison between RNA and DNA covering: 1) Sugar differences (ribose vs. deoxyribose) with focus on the 2'-OH group's implications for structure, 2) Base differences (Uracil vs. Thymine), 3) Strandedness differences and their functional implications, and 4) Stability and reactivity differences. Create a 1-2 paragraph explanation detailing why the 2'-hydroxyl group on ribose is significant for RNA's structural properties, reactivity, and functional versatility compared to DNA. Optional: Research and sketch the preferred sugar pucker conformations for ribose (C3'-endo) in A-form RNA helices versus deoxyribose (C2'-endo) in B-form DNA.",
        "testStrategy": "Review the RNA vs. DNA comparison for accuracy and comprehensiveness. Verify that the explanation of the 2'-OH significance addresses its role in RNA catalysis, forming A-form helices, and susceptibility to alkaline hydrolysis. Check that all key structural and functional differences are clearly articulated."
      },
      {
        "id": 5,
        "title": "Develop Thermodynamic Principles Materials",
        "description": "Create comprehensive materials explaining fundamental thermodynamic principles relevant to RNA folding.",
        "status": "pending",
        "dependencies": [
          4
        ],
        "priority": "medium",
        "details": "Document the concept of Gibbs Free Energy (ΔG) and its relationship to enthalpy (ΔH), entropy (ΔS), and temperature (T) in the context of molecular stability (ΔG = ΔH - TΔS). Explain why a negative ΔG is favorable for spontaneous processes like RNA folding into stable structures. Define chemical equilibrium and relate it to the concept of a Minimum Free Energy (MFE) structure for RNA. Write a 2-3 paragraph explanation of what Gibbs Free Energy represents and why structures with more negative ΔG are considered more stable for RNA molecules. Create flashcards for ΔG, ΔH, ΔS definitions and their relationship, MFE, and thermodynamic concepts related to spontaneity.",
        "testStrategy": "Review the thermodynamic principles documentation for accuracy and clarity. Verify that the explanation of Gibbs Free Energy correctly relates to RNA stability. Ensure the relationship between ΔG, ΔH, and TΔS is properly explained in the context of RNA folding.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Explanatory Content for ΔG, ΔH, ΔS, and Their Relationship",
            "description": "Develop clear explanations of Gibbs Free Energy (ΔG), enthalpy (ΔH), entropy (ΔS), and their mathematical relationship (ΔG = ΔH - TΔS) in the context of RNA folding.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Research and compile precise definitions for ΔG, ΔH, and ΔS from authoritative sources in biochemistry and thermodynamics\n2. Write clear explanations of each term using language accessible to biology students\n3. Explain the mathematical relationship between these variables and the significance of temperature (T)\n4. Create 2-3 simple diagrams illustrating how these concepts relate to molecular interactions in RNA\n5. Include specific examples showing how these values change during RNA folding\n6. Review for scientific accuracy and clarity\n\nTesting approach: Have 2-3 subject matter experts review the explanations for accuracy and comprehensibility. Test with a small group of students to ensure the material is understandable to the target audience.",
            "status": "pending",
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "Develop Content on Spontaneity and Negative ΔG in RNA Folding",
            "description": "Create explanatory material on why negative ΔG values are favorable for spontaneous processes, with specific examples related to RNA folding and stability.",
            "dependencies": [
              1
            ],
            "details": "Implementation steps:\n1. Explain the concept of spontaneity in thermodynamic processes\n2. Clarify why negative ΔG indicates a spontaneous process\n3. Develop 3-4 concrete examples showing how RNA folding relates to negative ΔG values\n4. Create a visual representation comparing stable vs. unstable RNA structures and their corresponding ΔG values\n5. Include real-world experimental data showing ΔG values for different RNA conformations\n6. Develop a simple interactive element where learners can manipulate factors affecting ΔG\n\nTesting approach: Test explanations with students who have limited prior knowledge of thermodynamics to ensure concepts are clearly conveyed. Verify examples with RNA folding simulation tools to confirm accuracy.",
            "status": "pending",
            "parentTaskId": 5
          },
          {
            "id": 3,
            "title": "Develop Materials on Chemical Equilibrium and MFE in RNA",
            "description": "Create content explaining chemical equilibrium concepts and how they relate to Minimum Free Energy (MFE) structures in RNA folding.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implementation steps:\n1. Define chemical equilibrium in the context of molecular folding\n2. Explain how equilibrium relates to energy minimization in biological systems\n3. Introduce the concept of Minimum Free Energy (MFE) structure for RNA\n4. Develop examples showing how RNA molecules find their MFE configuration\n5. Create a step-by-step explanation of how computational tools determine MFE structures\n6. Include comparisons between MFE structures and alternative conformations\n\nTesting approach: Validate explanations by comparing with current RNA folding algorithms and their documentation. Test with students to ensure they can correctly predict relative stability of simple RNA structures after studying the material.",
            "status": "pending",
            "parentTaskId": 5
          },
          {
            "id": 4,
            "title": "Write Comprehensive Explanation of ΔG and RNA Stability",
            "description": "Develop a 2-3 paragraph explanation that synthesizes the relationship between Gibbs Free Energy and RNA structural stability, suitable for inclusion in course materials.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Implementation steps:\n1. Draft an introductory paragraph establishing the fundamental relationship between ΔG and molecular stability\n2. Write a second paragraph explaining how specific molecular interactions in RNA contribute to overall ΔG\n3. Develop a third paragraph connecting ΔG calculations to practical applications in RNA research and prediction tools\n4. Ensure the explanation incorporates concepts from previous subtasks\n5. Edit for clarity, conciseness, and scientific accuracy\n6. Format the explanation for inclusion in various course materials\n\nTesting approach: Have colleagues review the paragraphs for scientific accuracy. Test comprehension by asking students to paraphrase the key points after reading the explanation.",
            "status": "pending",
            "parentTaskId": 5
          },
          {
            "id": 5,
            "title": "Create Thermodynamics Flashcards for RNA Folding Concepts",
            "description": "Design a comprehensive set of flashcards covering key thermodynamic concepts related to RNA folding, including definitions, relationships, and applications.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Implementation steps:\n1. Create definition flashcards for ΔG, ΔH, ΔS with concise explanations on one side and terms on the other\n2. Develop flashcards showing the mathematical relationship between ΔG, ΔH, ΔS, and T\n3. Create cards explaining MFE and its significance in RNA structure prediction\n4. Design flashcards illustrating the concept of spontaneity and its relationship to negative ΔG\n5. Include application-based flashcards that ask students to predict stability based on given thermodynamic values\n6. Format flashcards for both digital and print use\n7. Organize flashcards into logical learning sequences\n\nTesting approach: Test flashcards with students in spaced repetition sessions to measure retention of concepts. Revise cards with low retention rates for clarity and effectiveness.",
            "status": "pending",
            "parentTaskId": 5
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part1.Biochem.Thermodynamics",
          "anchor_link": "#part-1-mastering-rna-biochemistry-fundamentals-days-1-3---approx-4-5-hours-total-study--activity-time"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Explain thermodynamic principles relevant to RNA folding, including Gibbs Free Energy, spontaneity, and Minimum Free Energy structures.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "2-3 hours",
          "estimated_effort_hours_min": 2,
          "estimated_effort_hours_max": 3,
          "mastery_criteria_summary": "Clear explanations of ΔG, ΔH, ΔS, and their relationship. Accurate examples illustrating spontaneity and MFE concepts in RNA folding.",
          "activity_type": "explanatory_writing_flashcard_creation",
          "recommended_block": "active_learning",
          "deliverables": [
            "Comprehensive explanations of thermodynamic principles (ΔG, ΔH, ΔS, spontaneity, MFE).",
            "Flashcards covering key thermodynamic concepts for RNA folding."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 4,
          "curriculum_part_title": "Part 1: RNA Biochemistry - Thermodynamic Principles",
          "csm_tags": [
            "rna_modeling",
            "biochemistry",
            "thermodynamics",
            "gibbs_free_energy",
            "rna_folding"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:4",
          "activity:explanatory_writing",
          "activity:flashcard_creation",
          "block:active_learning",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 6,
        "title": "Document Base Stacking and Hydrogen Bonding in RNA",
        "description": "Create materials explaining base stacking and hydrogen bonding contributions to RNA stability.",
        "status": "pending",
        "dependencies": [
          5
        ],
        "priority": "medium",
        "details": "Document base stacking interactions, including their nature (van der Waals, hydrophobic, dipole-dipole/π-π electronic interactions), significance as a major stabilizing force, and sequence dependence. Explain hydrogen bonding in base pairs, including Watson-Crick A-U (2 H-bonds), G-C (3 H-bonds), and G-U wobble pairs (2 H-bonds, different geometry). Write a detailed explanation (2-3 paragraphs) contrasting the roles and relative energetic contributions of base stacking versus hydrogen bonding in stabilizing an RNA helix. Create a thought experiment comparing the stability of two hairpins: one with 5 G-C pairs versus one with 5 A-U pairs, justifying the prediction based on thermodynamic principles. Create flashcards for base stacking and hydrogen bonding concepts.",
        "testStrategy": "Review the base stacking and hydrogen bonding documentation for accuracy. Verify that the explanation correctly identifies base stacking as the major contributor to helix stability while hydrogen bonding contributes more to specificity. Check that the thought experiment includes a well-reasoned prediction based on thermodynamic principles.",
        "subtasks": [
          {
            "id": 1,
            "title": "Document Base Stacking Mechanisms and Energetics in RNA",
            "description": "Create comprehensive documentation explaining the mechanisms, energetic contributions, and sequence dependence of base stacking in RNA structures.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Research and compile information on the physical forces involved in base stacking (van der Waals, hydrophobic effects, dipole-dipole/π-π electronic interactions)\n2. Explain how these forces collectively contribute to RNA stability\n3. Document the relative energetic contribution of base stacking compared to other stabilizing forces\n4. Create diagrams illustrating the stacking interactions between adjacent bases in an RNA helix\n5. Explain how base sequence affects stacking strength (e.g., purine-purine vs. pyrimidine-pyrimidine stacking)\n6. Include numerical data on stacking energies for different base combinations\n7. Test by having subject matter experts review for accuracy and completeness",
            "status": "pending",
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "Document Hydrogen Bonding Patterns in RNA Base Pairs",
            "description": "Create detailed documentation of hydrogen bonding patterns in canonical and non-canonical RNA base pairs, including bond numbers and geometric arrangements.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Document Watson-Crick A-U base pairs with detailed description of the 2 hydrogen bonds formed\n2. Document Watson-Crick G-C base pairs with detailed description of the 3 hydrogen bonds formed\n3. Document G-U wobble pairs with detailed description of the 2 hydrogen bonds and their unique geometry\n4. Create molecular diagrams showing the hydrogen bond positions and lengths for each pair type\n5. Explain how hydrogen bonds contribute to specificity in base pairing\n6. Include information on bond energies for different types of hydrogen bonds in RNA\n7. Test by having subject matter experts review for accuracy and completeness",
            "status": "pending",
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "Write Comparative Analysis of Base Stacking vs. Hydrogen Bonding",
            "description": "Develop a detailed 2-3 paragraph analysis contrasting the roles and relative energetic contributions of base stacking versus hydrogen bonding in stabilizing RNA helices.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implementation steps:\n1. Synthesize information from subtasks 1 and 2 to compare the two stabilizing forces\n2. Write first paragraph introducing both forces and their basic mechanisms\n3. Write second paragraph comparing the energetic contributions (emphasizing that stacking typically contributes more to overall stability)\n4. Write third paragraph discussing how the two forces work together and their different roles in structure vs. specificity\n5. Include quantitative comparisons where possible (e.g., approximate energy values)\n6. Ensure the explanation is scientifically accurate but accessible\n7. Test by having both RNA experts and non-experts review for clarity and accuracy",
            "status": "pending",
            "parentTaskId": 6
          },
          {
            "id": 4,
            "title": "Develop Thought Experiment on Hairpin Stability",
            "description": "Create a thought experiment comparing the stability of two RNA hairpins: one with 5 G-C pairs versus one with 5 A-U pairs, with thermodynamic justification for stability predictions.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Implementation steps:\n1. Design a specific sequence for each hairpin (one with 5 G-C pairs, one with 5 A-U pairs)\n2. Calculate or estimate the free energy contribution from hydrogen bonding in each hairpin\n3. Calculate or estimate the free energy contribution from base stacking in each hairpin\n4. Analyze how the loop regions would affect overall stability\n5. Predict which hairpin would be more stable and at what temperatures\n6. Justify the prediction using thermodynamic principles from previous subtasks\n7. Create diagrams illustrating both hairpins and their energy landscapes\n8. Test by comparing predictions with experimental data or computational models if available",
            "status": "pending",
            "parentTaskId": 6
          },
          {
            "id": 5,
            "title": "Create Educational Flashcards on RNA Stabilizing Forces",
            "description": "Develop a set of educational flashcards covering key concepts related to base stacking and hydrogen bonding in RNA structures.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Implementation steps:\n1. Create 5-7 flashcards on base stacking concepts:\n   - Definition and physical basis\n   - Types of interactions involved\n   - Sequence dependence\n   - Energetic contribution\n   - Structural significance\n2. Create 5-7 flashcards on hydrogen bonding concepts:\n   - Watson-Crick base pairing\n   - G-U wobble pairs\n   - Bond geometries and strengths\n   - Role in specificity\n   - Comparison to DNA hydrogen bonding\n3. Create 3-5 flashcards integrating both concepts:\n   - Relative contributions to stability\n   - How they work together\n   - Experimental methods to measure each\n4. Format each flashcard with a question on one side and a concise, accurate answer on the other\n5. Include simple diagrams where helpful\n6. Test flashcards with students or researchers to ensure clarity and educational value",
            "status": "pending",
            "parentTaskId": 6
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part2.Biochem.BaseStacking",
          "anchor_link": "#part-2-mastering-foundational-biochemical-principles-for-rna-folding-days-3-5---approx-4-5-hours-total-study--activity-time"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Explain the roles of base stacking and hydrogen bonding in RNA stability, including their relative energetic contributions and how they work together.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "2-3 hours",
          "estimated_effort_hours_min": 2,
          "estimated_effort_hours_max": 3,
          "mastery_criteria_summary": "Clear written explanations of base stacking and hydrogen bonding in RNA stability. Flashcards for base stacking and hydrogen bonding concepts created.",
          "activity_type": "explanatory_writing_flashcard_creation",
          "recommended_block": "active_learning",
          "deliverables": [
            "Written explanations of base stacking and hydrogen bonding in RNA stability.",
            "Flashcards defining base stacking and hydrogen bonding concepts."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 5,
          "curriculum_part_title": "Part 2: Biochemistry - Base Stacking and Hydrogen Bonding",
          "csm_tags": [
            "rna_modeling",
            "biochemistry",
            "base_stacking",
            "hydrogen_bonding",
            "rna_stability"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:5",
          "activity:explanatory_writing",
          "activity:flashcard_creation",
          "block:active_learning",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 7,
        "title": "Document Loop Penalties and Electrostatic Effects in RNA",
        "description": "Create materials explaining loop penalties, electrostatic repulsion, and their effects on RNA stability.",
        "status": "pending",
        "dependencies": [
          6
        ],
        "priority": "medium",
        "details": "Document loop penalties as an entropic cost associated with the conformational restriction of forming hairpin loops, internal loops, bulges, and multi-loops. Explain how loop penalties depend on loop type and size. Document electrostatic repulsion from the negatively charged phosphate backbone and the mitigating role of counterions (e.g., Mg²⁺). Write a detailed explanation of why forming a hairpin loop is entropically unfavorable and what factors influence this unfavorable contribution. Create flashcards for loop penalties, electrostatic repulsion, and the role of counterions in RNA stability.",
        "testStrategy": "Review the loop penalties and electrostatic effects documentation for accuracy. Verify that the explanation of entropic costs for loop formation is clear and correct. Ensure the role of counterions in mitigating electrostatic repulsion is properly explained.",
        "subtasks": [
          {
            "id": 1,
            "title": "Document Loop Penalties in RNA Secondary Structures",
            "description": "Create comprehensive documentation explaining loop penalties as entropic costs in RNA secondary structures, covering different loop types and their size-dependent effects.",
            "dependencies": [],
            "details": "1. Research and compile information on entropy costs in RNA folding\n2. Define and explain loop penalties in RNA structures\n3. Document the four main loop types: hairpin loops, internal loops, bulges, and multi-loops\n4. Create diagrams illustrating each loop type\n5. Explain how loop size affects penalty values with mathematical expressions\n6. Include a table showing typical entropy costs for different loop sizes\n7. Reference primary literature sources for loop penalty parameters\n8. Test by having colleagues review for technical accuracy",
            "status": "pending",
            "parentTaskId": 7
          },
          {
            "id": 2,
            "title": "Analyze Entropic Unfavorability of Hairpin Loops",
            "description": "Develop a detailed explanation of why forming hairpin loops is entropically unfavorable, with examples and factors that influence this entropic cost.",
            "dependencies": [
              1
            ],
            "details": "1. Build on the general loop penalty documentation from subtask 1\n2. Explain conformational restriction in hairpin formation\n3. Discuss the reduction in degrees of freedom when nucleotides form a loop\n4. Calculate entropy changes using statistical mechanics principles\n5. Analyze how base stacking in the loop affects stability\n6. Document how loop sequence composition influences stability\n7. Provide specific examples with tetraloops and other common hairpin motifs\n8. Compare entropy costs between different hairpin sizes\n9. Test by creating a small simulation demonstrating entropy changes",
            "status": "pending",
            "parentTaskId": 7
          },
          {
            "id": 3,
            "title": "Document Electrostatic Repulsion and Counterion Effects",
            "description": "Create documentation on electrostatic repulsion in RNA structures due to the negatively charged phosphate backbone and explain how counterions mitigate this effect.",
            "dependencies": [],
            "details": "1. Explain the chemical basis for negative charges in the RNA backbone\n2. Document how phosphate groups create electrostatic repulsion\n3. Calculate typical repulsion forces at various ionic strengths\n4. Explain the concept of Debye screening length in RNA\n5. Document the role of monovalent ions (Na+, K+) in screening charges\n6. Explain how divalent ions (especially Mg2+) interact with RNA\n7. Analyze ion-specific effects on RNA stability\n8. Create diagrams showing counterion condensation around RNA\n9. Test by reviewing with a biophysicist for accuracy",
            "status": "pending",
            "parentTaskId": 7
          },
          {
            "id": 4,
            "title": "Create Educational Flashcards on RNA Stability Factors",
            "description": "Develop a set of educational flashcards covering loop penalties, electrostatic repulsion, and counterion effects on RNA stability for learning and teaching purposes.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "1. Create 5-7 flashcards on loop penalties covering:\n   - Definition of loop penalties\n   - Different loop types\n   - Size dependencies\n   - Sequence effects\n2. Create 5-7 flashcards on hairpin loop entropy covering:\n   - Conformational restriction\n   - Factors affecting unfavorability\n   - Stable motifs like tetraloops\n3. Create 5-7 flashcards on electrostatic effects covering:\n   - Backbone repulsion\n   - Counterion condensation\n   - Mg2+ vs. monovalent ions\n4. Design cards with question on front, answer on back\n5. Include diagrams where helpful\n6. Test flashcards with students or colleagues for clarity\n7. Implement feedback and revise cards as needed",
            "status": "pending",
            "parentTaskId": 7
          },
          {
            "id": 5,
            "title": "Review and Integrate RNA Stability Documentation",
            "description": "Review all materials for accuracy, consistency, and completeness, then integrate them into a cohesive educational resource on RNA stability factors.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "1. Review all documents for scientific accuracy\n2. Check for consistency in terminology across all materials\n3. Ensure all materials use the same notation and units\n4. Verify all diagrams are correctly labeled and referenced\n5. Cross-reference with recent literature to ensure up-to-date information\n6. Integrate the separate documents into a cohesive resource with:\n   - Table of contents\n   - Glossary of terms\n   - Cross-references between sections\n7. Create a summary document connecting loop penalties and electrostatic effects\n8. Test the integrated materials with both experts and students\n9. Make final revisions based on testing feedback",
            "status": "pending",
            "parentTaskId": 7
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part2.Thermo.LoopsElectrostatics",
          "anchor_link": "#part-2-mastering-foundational-thermodynamic-principles-for-rna-folding-days-3-5---approx-4-5-hours-total-study--activity-time"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Explain loop penalties as an entropic cost in RNA folding and the role of electrostatic repulsion from the phosphate backbone, including mitigation by counterions.",
          "estimated_effort_tshirt": "S",
          "estimated_effort_hours_raw": "1-1.5 hours",
          "estimated_effort_hours_min": 1,
          "estimated_effort_hours_max": 1.5,
          "mastery_criteria_summary": "Clear explanation of why forming a hairpin loop is entropically unfavorable (Task 2.3 PRD). Notes on electrostatic repulsion and counterions. Flashcards created.",
          "activity_type": "focused_reading_explanation_writing_flashcard_creation",
          "recommended_block": "active_learning",
          "deliverables": [
            "Written explanation of why forming a hairpin loop is entropically unfavorable and factors influencing this contribution (Task 2.3 PRD for Day 5).",
            "Notes on electrostatic repulsion from the phosphate backbone and the mitigating role of counterions.",
            "Flashcards for loop penalties, electrostatic repulsion, and counterions."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 5,
          "curriculum_part_title": "Part 2: Thermodynamics - Loop Penalties & Electrostatics",
          "csm_tags": [
            "rna_modeling",
            "thermodynamics",
            "loop_entropy",
            "electrostatics",
            "counterions",
            "rna_stability"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:5",
          "activity:focused_reading",
          "block:active_learning",
          "effort_tshirt:S"
        ]
      },
      {
        "id": 8,
        "title": "Document Environmental Influences on RNA Stability",
        "description": "Create materials explaining how environmental factors like temperature and salt concentration affect RNA folding and stability.",
        "status": "pending",
        "dependencies": [
          7
        ],
        "priority": "low",
        "details": "Document how temperature affects RNA stability through its impact on the TΔS term in the Gibbs Free Energy equation, explaining that higher temperatures favor unfolding. Explain how salt concentration, particularly the presence of cations like Mg²⁺, shields phosphate charges and stabilizes helices and compact folds. Briefly mention how extreme pH can alter protonation states of bases and disrupt hydrogen bonding. Create a short summary of how these environmental factors might be relevant to RNA structure prediction tools. Create flashcards for the effects of temperature, salt concentration, and pH on RNA stability.",
        "testStrategy": "Review the environmental influences documentation for accuracy and completeness. Verify that the explanation of temperature effects correctly relates to the TΔS term. Ensure the role of salt concentration in stabilizing RNA structures is properly explained.",
        "subtasks": [
          {
            "id": 1,
            "title": "Explain Temperature Effects on RNA Stability Through Gibbs Free Energy",
            "description": "Create a detailed explanation of how temperature affects RNA stability through the TΔS term in the Gibbs Free Energy equation, and why higher temperatures favor RNA unfolding.",
            "dependencies": [],
            "details": "1. Introduce the Gibbs Free Energy equation (ΔG = ΔH - TΔS) and its relevance to RNA folding.\n2. Explain the enthalpy (ΔH) and entropy (ΔS) components in RNA folding.\n3. Illustrate mathematically how increasing temperature (T) amplifies the -TΔS term.\n4. Provide specific examples of how higher temperatures disrupt base pairing and secondary structures.\n5. Include a graph showing the relationship between temperature and RNA stability.\n6. Create 1-2 diagrams showing RNA in folded vs. unfolded states at different temperatures.\n7. Test by having a colleague with biochemistry background review for accuracy.",
            "status": "pending",
            "parentTaskId": 8
          },
          {
            "id": 2,
            "title": "Document Salt Concentration Effects on RNA Stability",
            "description": "Develop materials explaining how salt concentration, particularly cations like Mg²⁺, shields phosphate charges and stabilizes RNA helices and compact folds.",
            "dependencies": [
              1
            ],
            "details": "1. Explain the electrostatic repulsion between phosphate groups in RNA backbone.\n2. Detail how monovalent (Na⁺, K⁺) and divalent (Mg²⁺, Ca²⁺) cations interact with RNA.\n3. Compare the effectiveness of monovalent vs. divalent cations in stabilizing RNA structures.\n4. Describe specific structural motifs that are particularly dependent on cation stabilization.\n5. Include molecular diagrams showing cation-RNA interactions.\n6. Provide experimental examples of how changing salt concentration affects RNA folding.\n7. Test by creating a simple quiz to verify key concepts are clearly communicated.",
            "status": "pending",
            "parentTaskId": 8
          },
          {
            "id": 3,
            "title": "Explain pH Effects on RNA Base Protonation and Hydrogen Bonding",
            "description": "Create a concise explanation of how extreme pH values alter protonation states of RNA bases and disrupt hydrogen bonding patterns.",
            "dependencies": [
              1
            ],
            "details": "1. Identify the typical pKa values of RNA nucleobases.\n2. Explain how protonation/deprotonation occurs at non-physiological pH.\n3. Describe how altered protonation states affect hydrogen bonding capabilities.\n4. Provide examples of specific base pairs that are particularly sensitive to pH changes.\n5. Include diagrams showing normal vs. disrupted hydrogen bonding at extreme pH.\n6. Briefly mention how pH changes can lead to alternative folding patterns or denaturation.\n7. Test by comparing against current literature to ensure accuracy.",
            "status": "pending",
            "parentTaskId": 8
          },
          {
            "id": 4,
            "title": "Create Comparative Summary Table of Environmental Factors",
            "description": "Develop a comprehensive table comparing the effects of temperature, salt concentration, and pH on RNA stability with specific examples and mechanisms.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "1. Design a table with columns for: Environmental Factor, Mechanism of Action, Effect on Stability, Typical Range, and Notable Examples.\n2. For temperature: include entropy effects, melting temperatures, and examples of thermostable RNAs.\n3. For salt concentration: include electrostatic shielding, specific ion effects, and concentration thresholds.\n4. For pH: include base protonation effects and pH-sensitive RNA structures.\n5. Add a column for practical considerations in experimental settings.\n6. Ensure the table is visually clear with appropriate formatting.\n7. Test by having researchers from different backgrounds review for clarity and completeness.",
            "status": "pending",
            "parentTaskId": 8
          },
          {
            "id": 5,
            "title": "Summarize Relevance to RNA Structure Prediction Tools",
            "description": "Create a summary explaining how temperature, salt concentration, and pH considerations are incorporated into RNA structure prediction tools.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "1. Research how major RNA structure prediction algorithms (e.g., Mfold, RNAfold, RNAstructure) account for temperature.\n2. Investigate how these tools incorporate salt concentration parameters.\n3. Determine if and how pH effects are modeled in prediction software.\n4. Explain limitations of current prediction tools regarding environmental factors.\n5. Suggest best practices for users when applying these tools under varying conditions.\n6. Include specific examples of prediction outcomes at different parameter settings.\n7. Test by running example predictions with different environmental parameters and verifying the summary accurately reflects the differences.",
            "status": "pending",
            "parentTaskId": 8
          },
          {
            "id": 6,
            "title": "Develop Flashcards on Environmental Influences on RNA Stability",
            "description": "Create a set of educational flashcards covering the effects of temperature, salt concentration, and pH on RNA stability.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5
            ],
            "details": "1. Design 5-7 flashcards for temperature effects, including questions on Gibbs Free Energy, entropy, and practical examples.\n2. Create 5-7 flashcards for salt concentration effects, covering electrostatic shielding, ion-specific effects, and experimental considerations.\n3. Develop 3-5 flashcards for pH effects on RNA stability.\n4. Add 2-3 integrative flashcards that connect multiple environmental factors.\n5. Include both conceptual questions and numerical problems where appropriate.\n6. Format cards with clear questions on front and concise, accurate answers on back.\n7. Test flashcards with students or colleagues to ensure clarity and appropriate difficulty level.",
            "status": "pending",
            "parentTaskId": 8
          },
          {
            "id": 7,
            "title": "Review and Finalize All Educational Materials",
            "description": "Conduct a comprehensive review of all created materials for accuracy, completeness, clarity, and educational effectiveness.",
            "dependencies": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "details": "1. Develop a checklist for reviewing each component (explanations, diagrams, table, summary, flashcards).\n2. Verify all scientific content against recent literature and textbooks.\n3. Check for consistency in terminology and explanations across all materials.\n4. Ensure appropriate depth for the target audience.\n5. Have at least two subject matter experts review the complete set of materials.\n6. Make necessary revisions based on feedback.\n7. Test the materials with a small group from the target audience and collect feedback on clarity and usefulness.",
            "status": "pending",
            "parentTaskId": 8
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part2.Thermo.EnvFactors",
          "anchor_link": "#part-2-mastering-foundational-thermodynamic-principles-for-rna-folding-days-3-5---approx-4-5-hours-total-study--activity-time"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Explain how environmental factors like temperature, salt concentration, and pH affect RNA folding and stability, and their relevance to prediction tools.",
          "estimated_effort_tshirt": "S",
          "estimated_effort_hours_raw": "0.5-1 hour",
          "estimated_effort_hours_min": 0.5,
          "estimated_effort_hours_max": 1,
          "mastery_criteria_summary": "Notes summarizing effects of temperature, salt, and pH. Short summary on relevance to RNA structure prediction tools. Flashcards created.",
          "activity_type": "focused_reading_summary_writing_flashcard_creation",
          "recommended_block": "passive_review",
          "deliverables": [
            "Notes on how temperature, salt concentration, and pH affect RNA stability.",
            "Short summary of the relevance of these environmental factors to RNA structure prediction tools.",
            "Flashcards for temperature, salt concentration, and pH effects on RNA."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 5,
          "curriculum_part_title": "Part 2: Thermodynamics - Environmental Factors",
          "csm_tags": [
            "rna_modeling",
            "thermodynamics",
            "temperature_effects",
            "salt_effects",
            "ph_effects",
            "rna_stability"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:5",
          "activity:summary_writing",
          "block:passive_review",
          "effort_tshirt:S"
        ]
      },
      {
        "id": 9,
        "title": "Develop Comprehensive Self-Assessment Materials",
        "description": "Create a comprehensive quiz and practical assessment tasks to evaluate mastery of RNA biochemistry and thermodynamics concepts.",
        "status": "pending",
        "dependencies": [
          8
        ],
        "priority": "medium",
        "details": "Create a comprehensive quiz of 15-20 questions covering all learning objectives, including multiple-choice, true/false, short answer, and fill-in-the-blank questions. Design a practical assessment task requiring drawing a detailed, labeled RNA nucleotide and writing a clear explanation of the key energetic contributions to RNA secondary structure stability. Create a grading rubric for both the quiz and practical assessment, with ≥85% accuracy as the target for demonstrating mastery. Include a template for identifying weak areas and planning targeted review.",
        "testStrategy": "Review the self-assessment materials for comprehensive coverage of all learning objectives. Verify that the quiz includes a good mix of question types and difficulty levels. Ensure the practical assessment effectively tests the ability to apply knowledge of RNA structure and thermodynamics.",
        "subtasks": [
          {
            "id": 1,
            "title": "Develop a Comprehensive Quiz with Mixed Question Formats",
            "description": "Create a 15-20 question quiz covering all RNA biochemistry and thermodynamics learning objectives with varied question formats and difficulty levels.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Review all learning objectives to ensure comprehensive coverage\n2. Create 5-7 multiple-choice questions with 4 answer options each\n3. Develop 3-4 true/false questions with clear statements\n4. Design 4-5 short answer questions requiring 2-3 sentence responses\n5. Create 3-4 fill-in-the-blank questions focusing on key terms and concepts\n6. Ensure questions span all difficulty levels (basic recall, application, analysis)\n7. Include answer key with explanations for each question\n8. Organize questions by topic area for easier assessment\n\nTesting approach: Have subject matter experts review for accuracy, clarity, and alignment with learning objectives. Verify that questions accurately assess understanding rather than just memorization.",
            "status": "pending",
            "parentTaskId": 9
          },
          {
            "id": 2,
            "title": "Design Practical Assessment Task for RNA Structure",
            "description": "Create a practical assessment requiring students to draw a detailed RNA nucleotide and explain energetic contributions to RNA secondary structure stability.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Develop clear instructions for the nucleotide drawing portion, specifying required labels (e.g., 5' and 3' ends, phosphate groups, ribose sugar, nitrogenous base, hydrogen bonds)\n2. Create a template or workspace for the drawing portion\n3. Draft specific prompts for the written explanation component, requiring students to address:\n   - Base-pairing interactions and hydrogen bonding\n   - Base-stacking interactions\n   - Electrostatic interactions\n   - Solvent effects\n   - Entropic contributions\n4. Specify expected length (e.g., 250-300 words) and format for the explanation\n5. Create an exemplar answer for instructor reference\n\nTesting approach: Create a sample response to ensure the task can be completed within reasonable time constraints. Verify that instructions are unambiguous and that the task effectively tests conceptual understanding.",
            "status": "pending",
            "parentTaskId": 9
          },
          {
            "id": 3,
            "title": "Create Comprehensive Grading Rubrics",
            "description": "Develop detailed grading rubrics for both the quiz and practical assessment, defining mastery as ≥85% accuracy.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implementation steps:\n1. For the quiz:\n   - Assign point values to each question type (e.g., 1 point for T/F, 2 points for multiple choice, 3-5 points for short answer)\n   - Create a total point scale (e.g., out of 50 points)\n   - Define mastery threshold at 85% (e.g., 43/50 points)\n   - Develop partial credit guidelines for short answer questions\n\n2. For the practical assessment:\n   - Create a detailed rubric for the RNA nucleotide drawing (10-15 points) covering accuracy, completeness, and proper labeling\n   - Develop a rubric for the written explanation (15-20 points) evaluating conceptual understanding, completeness, accuracy, and clarity\n   - Define specific criteria for each score level\n   - Set mastery threshold at 85% of total points\n\n3. Include guidelines for consistent grading across multiple evaluators\n\nTesting approach: Apply rubrics to sample student work to verify clarity and fairness. Ensure rubrics align with learning objectives and properly weight the most important concepts.",
            "status": "pending",
            "parentTaskId": 9
          },
          {
            "id": 4,
            "title": "Develop Personalized Review Template",
            "description": "Create a template to help students identify weak areas and plan targeted review based on assessment results.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Implementation steps:\n1. Design a self-reflection section prompting students to analyze their performance\n2. Create a structured format for categorizing quiz and practical assessment results by topic area (e.g., RNA structure, thermodynamic principles, biochemical properties)\n3. Develop a scoring matrix that maps questions to specific learning objectives\n4. Create a template section for identifying knowledge gaps based on missed questions\n5. Design a targeted study plan template with:\n   - Space to list weak areas requiring review\n   - Recommended resources for each topic area\n   - Suggested practice exercises\n   - Timeline for review completion\n   - Self-check mechanisms to verify improvement\n6. Include examples of completed templates as models\n\nTesting approach: Have students test the template with sample assessment results to ensure it effectively guides them to identify knowledge gaps and create actionable review plans.",
            "status": "pending",
            "parentTaskId": 9
          },
          {
            "id": 5,
            "title": "Review and Validate Assessment Materials",
            "description": "Conduct comprehensive review of all assessment materials for coverage, clarity, and alignment with learning objectives.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Implementation steps:\n1. Create a mapping document linking each assessment item to specific learning objectives\n2. Verify all learning objectives are adequately covered across assessment materials\n3. Review language for clarity, precision, and appropriate scientific terminology\n4. Check for balanced coverage of topics based on their importance\n5. Verify progressive difficulty levels throughout the assessment materials\n6. Ensure practical assessment and quiz complement each other in coverage\n7. Review rubrics for fair evaluation criteria\n8. Validate that the review template effectively guides students to address knowledge gaps\n9. Make final revisions based on review findings\n10. Compile all materials into a cohesive assessment package with clear instructions\n\nTesting approach: Conduct pilot testing with a small group of students and instructors to gather feedback on clarity, difficulty level, and effectiveness. Make final adjustments based on this feedback before full implementation.",
            "status": "pending",
            "parentTaskId": 9
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part3.Assessment.Creation",
          "anchor_link": "#part-3-consolidation-self-assessment--reflection-days-6-7---approx-3-4-hours-total"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Create a comprehensive self-quiz (15-20 questions) and design a practical assessment task (drawing/explanation) covering Week 1's RNA biochemistry and thermodynamics. Develop associated grading rubrics.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "1.5-2 hours",
          "estimated_effort_hours_min": 1.5,
          "estimated_effort_hours_max": 2,
          "mastery_criteria_summary": "Comprehensive 15-20 question quiz created with answer key. Practical assessment task designed with clear instructions. Detailed grading rubrics for both developed, targeting >=85% for mastery.",
          "activity_type": "assessment_design_quiz_creation_rubric_development",
          "recommended_block": "active_learning",
          "deliverables": [
            "Self-created comprehensive quiz (15-20 questions) with answer key (maps to PRD Task 3.1).",
            "Design for practical assessment task (drawing a nucleotide & explaining energetic contributions) (maps to PRD Task 3.3 design part).",
            "Grading rubrics for both the quiz and the practical assessment."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 6,
          "curriculum_part_title": "Part 3: Self-Assessment - Material Creation",
          "csm_tags": [
            "rna_modeling",
            "self_assessment",
            "quiz_design",
            "rubric_creation",
            "pedagogy",
            "week1_review_prep"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:6",
          "activity:assessment_design",
          "activity:quiz_creation",
          "block:active_learning",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 10,
        "title": "Week 1 Learning Reflection, Flashcard Finalization & HPE Logging",
        "description": "Reflect on Week 1 learning, finalize and organize all flashcards, and log all study time and deliverables in Task Master.",
        "status": "pending",
        "dependencies": [
          11
        ],
        "priority": "medium",
        "details": "Write a reflection on Week 1 learning. Finalize and organize all flashcards for the week. Log all study time and deliverables for Week 1 in Task Master.",
        "testStrategy": "Written reflection completed. Flashcards finalized. All progress logged.",
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part3.ReflectFinalizeLog",
          "anchor_link": "#part-3-consolidation-self-assessment--reflection-days-6-7---approx-3-4-hours-total"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Reflect on Week 1 learning process and outcomes, finalize and organize all flashcards for the week, and ensure all study time and deliverables are logged in HPE Task Master.",
          "estimated_effort_tshirt": "S",
          "estimated_effort_hours_raw": "0.5-1 hour",
          "estimated_effort_hours_min": 0.5,
          "estimated_effort_hours_max": 1,
          "mastery_criteria_summary": "Written learning reflection completed. Week 1 flashcards finalized and organized for SRS. All study time and deliverables for Week 1 logged in Task Master.",
          "activity_type": "reflection_flashcard_review_logging_consolidation",
          "recommended_block": "passive_review",
          "deliverables": [
            "Written learning reflection for Week 1 (PRD Task 3.G).",
            "Finalized and organized flashcard set for Week 1 material (ready for SRS).",
            "All study time and deliverables for Week 1 logged and status updated in Task Master."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 7,
          "curriculum_part_title": "Part 3: Reflection, Finalization & Logging",
          "csm_tags": [
            "rna_modeling",
            "reflection",
            "hpe_logging",
            "flashcard_review",
            "consolidation",
            "week1_wrapup"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:7",
          "activity:reflection",
          "activity:flashcard_review",
          "activity:hpe_logging",
          "block:passive_review",
          "effort_tshirt:S"
        ],
        "subtasks": [
          {
            "id": 1,
            "title": "Draft structured Week 1 learning reflection",
            "description": "Create a comprehensive reflection document analyzing Week 1 learning experiences, key insights, and areas for improvement",
            "dependencies": [],
            "details": "1. Create a new document with clear sections for: a) Summary of topics covered, b) Key concepts learned, c) Challenges encountered, d) Successful learning strategies, e) Areas for improvement, f) Questions that arose, g) Goals for next week\n2. For each section, write 2-3 paragraphs with specific examples from Week 1\n3. Include references to specific resources, lectures, or assignments that were particularly valuable\n4. Conclude with actionable next steps for Week 2\n5. Test by reviewing for completeness, clarity, and actionable insights",
            "status": "pending",
            "parentTaskId": 12
          },
          {
            "id": 2,
            "title": "Review and organize Week 1 flashcards",
            "description": "Systematically review all Week 1 flashcards, tag them by topic, and organize them into a spaced repetition system for ongoing study",
            "dependencies": [],
            "details": "1. Gather all flashcards created during Week 1\n2. Review each flashcard for accuracy, clarity, and completeness\n3. Tag each flashcard with appropriate topic categories (e.g., key concepts, definitions, formulas)\n4. Organize flashcards into digital format if not already done (using Anki, Quizlet, or similar tool)\n5. Set up spaced repetition schedule for ongoing review\n6. Create backup of all flashcards\n7. Test the system by doing a practice review session with the organized flashcards",
            "status": "pending",
            "parentTaskId": 12
          },
          {
            "id": 3,
            "title": "Log Week 1 study activities in Task Master",
            "description": "Document all Week 1 study time, activities, and deliverables in Task Master according to tracking guidelines",
            "dependencies": [
              1,
              2
            ],
            "details": "1. Open Task Master logging system\n2. Create entries for each study session from Week 1, including: a) Date and duration, b) Topics covered, c) Resources used, d) Deliverables completed\n3. Upload or link to all Week 1 deliverables, including the learning reflection document from Subtask 1\n4. Tag all flashcards as completed from Subtask 2\n5. Calculate and record total study hours for Week 1\n6. Add notes on effectiveness of different study methods\n7. Verify all entries for accuracy and completeness\n8. Generate Week 1 summary report if Task Master has this feature\n9. Test by reviewing all entries to ensure nothing is missing",
            "status": "pending",
            "parentTaskId": 12
          }
        ]
      },
      {
        "id": 11,
        "title": "Complete Week 1 Self-Assessments (Quiz & Practical)",
        "description": "Complete the self-created quiz and practical assessment for Week 1 RNA foundations.",
        "status": "pending",
        "dependencies": [
          9
        ],
        "priority": "high",
        "details": "Take the quiz created in Task 9.1. Complete the practical drawing/explanation task from Task 9.2. Self-grade using rubrics from Task 9.3.",
        "testStrategy": "Achieve >=85% on quiz. Achieve satisfactory self-grade on practical task based on rubric.",
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/5_biology/RNA_MODELING/rna-modeling_p1-foundations_week1-7day.md",
          "csm_id": "RNA.P1.Foundations.W1.Part3.ExecuteAssessments",
          "anchor_link": "#part-3-consolidation-self-assessment--reflection-days-6-7---approx-3-4-hours-total"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Complete the self-created quiz and the practical assessment task for Week 1 RNA foundations, aiming for >=85% mastery, and self-grade.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "1.0-1.5 hours",
          "estimated_effort_hours_min": 1,
          "estimated_effort_hours_max": 1.5,
          "mastery_criteria_summary": "Self-quiz completed and scored (>=85% target). Practical task completed and self-graded against rubric (satisfactory).",
          "activity_type": "self_assessment_active_execution",
          "recommended_block": "active_learning",
          "deliverables": [
            "Completed self-quiz with score (maps to PRD Task 3.2).",
            "Completed practical assessment (drawing/explanation) and self-graded result (maps to PRD Task 3.3 completion part)."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": 6,
          "curriculum_part_title": "Part 3: Execute Self-Assessments",
          "csm_tags": [
            "rna_modeling",
            "self_assessment",
            "quiz_taking",
            "practical_execution",
            "week1_mastery_check"
          ]
        },
        "labels": [
          "domain:rna_modeling",
          "pillar:1",
          "curriculum_week:1",
          "plan_day:6",
          "activity:self_assessment_execution",
          "block:active_learning",
          "effort_tshirt:M"
        ],
        "subtasks": [
          {
            "id": 1,
            "title": "Complete and Score Self-Created Week 1 RNA Quiz",
            "description": "Take the previously created Week 1 RNA foundations quiz (from Task 9.1), record your answers, and calculate your initial score.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Retrieve the quiz created in Task 9.1\n2. Set aside 30-45 minutes of uninterrupted time to complete the quiz\n3. Answer all questions without referring to notes or external resources\n4. Record your answers in a document\n5. Calculate your raw score based on the answer key\n6. Document any questions you found particularly challenging\n7. Save your completed quiz with answers and initial score for later review\n\nTesting approach: Verify all questions have been answered and initial scoring is complete before proceeding to the next subtask.",
            "status": "pending",
            "parentTaskId": 11
          },
          {
            "id": 2,
            "title": "Complete and Document Practical RNA Drawing/Explanation Task",
            "description": "Perform the practical assessment created in Task 9.2 that involves drawing RNA structures and explaining key RNA concepts.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Retrieve the practical assessment instructions from Task 9.2\n2. Gather necessary materials (paper, drawing tools, or digital drawing tools)\n3. Set aside 45-60 minutes of focused time for the practical task\n4. Complete all required drawings of RNA structures (may include secondary structures, base pairing, etc.)\n5. Write explanations for all required RNA concepts as specified in the assessment\n6. Take clear photos/scans of hand-drawn work or save digital files\n7. Compile all drawings and explanations into a single document\n8. Ensure all parts of the practical assessment are complete and properly documented\n\nTesting approach: Review the completed practical work against the original requirements to ensure all components have been addressed.",
            "status": "pending",
            "parentTaskId": 11
          },
          {
            "id": 3,
            "title": "Self-Grade Assessments and Create Improvement Plan",
            "description": "Using the rubrics from Task 9.3, evaluate your quiz and practical assessment performance, record results, and develop a targeted improvement plan.",
            "dependencies": [
              1,
              2
            ],
            "details": "Implementation steps:\n1. Retrieve the grading rubrics created in Task 9.3\n2. Re-review your quiz answers and apply the quiz rubric criteria\n3. Evaluate your practical assessment using the practical task rubric\n4. Calculate final scores for both assessments\n5. Compare your initial quiz score with the rubric-based evaluation\n6. Document specific strengths demonstrated in both assessments\n7. Identify knowledge gaps and areas for improvement\n8. Create a specific improvement plan with:\n   - List of RNA concepts needing further study\n   - Specific resources to review (textbook sections, videos, etc.)\n   - Timeline for addressing each improvement area\n   - Method to re-test understanding after review\n9. Compile all assessment results and improvement plan into a final report\n\nTesting approach: Ensure the improvement plan addresses all identified weaknesses and includes concrete, actionable steps with specific resources and timelines.",
            "status": "pending",
            "parentTaskId": 11
          }
        ]
      },
      {
        "id": 12,
        "title": "Create Learning Reflection and Progress Tracking System",
        "description": "Develop a system for reflecting on the learning process, tracking progress, and integrating with the Holistic Performance Enhancement (HPE) system.",
        "status": "pending",
        "dependencies": [
          9
        ],
        "priority": "low",
        "details": "Create a structured template for reflecting on the learning process, including sections for: 1) Concepts that were easy to understand, 2) Challenging concepts requiring further review, 3) Most effective learning strategies, 4) Areas for improvement in learning approach. Develop a progress tracking system that integrates with the Task Master component of the HPE system, including logging study time and completion of deliverables. Set up a flashcard organization system for the ~30-50 created flashcards that integrates with the Flash-Memory Layer of the HPE system for long-term retention through spaced repetition.",
        "testStrategy": "Review the reflection template for comprehensiveness and usefulness in identifying strengths and areas for improvement. Verify that the progress tracking system effectively integrates with the HPE system components. Ensure the flashcard organization system supports effective spaced repetition learning.",
        "subtasks": [
          {
            "id": 1,
            "title": "Design and Implement Learning Reflection Template",
            "description": "Create a structured template for reflecting on the learning process with sections for easy concepts, challenging concepts, effective learning strategies, and areas for improvement.",
            "dependencies": [],
            "details": "Implementation steps:\n1. Design a template structure with 4 main sections: 'Easy Concepts', 'Challenging Concepts', 'Effective Strategies', and 'Areas for Improvement'\n2. Implement the template as a digital form (e.g., markdown template, HTML form, or document template)\n3. Add guiding questions for each section to prompt thoughtful reflection\n4. Include a timestamp field and subject/topic identifier\n5. Create a storage system for completed reflections\n6. Add tagging functionality to categorize reflections by subject/topic\n\nTesting approach:\n- Create sample reflections using the template\n- Verify all sections prompt useful reflections\n- Test storage and retrieval of completed reflections",
            "status": "pending",
            "parentTaskId": 12
          },
          {
            "id": 2,
            "title": "Develop Study Time and Deliverable Tracking System",
            "description": "Build a progress tracking system that logs study time and completion of deliverables, with integration points for the Task Master component of the HPE system.",
            "dependencies": [
              1
            ],
            "details": "Implementation steps:\n1. Create a data structure to store study sessions with fields for date, start time, end time, duration, topic, and notes\n2. Implement a timer functionality for tracking active study time\n3. Develop a deliverable tracking component with fields for deliverable description, due date, completion status, and quality self-assessment\n4. Design API endpoints or integration hooks for the Task Master component of HPE\n5. Implement data export functionality for analysis\n6. Create a dashboard view showing study time trends and deliverable completion rates\n\nTesting approach:\n- Test timer functionality for accuracy\n- Verify data persistence across sessions\n- Test the integration points with mock HPE Task Master data\n- Validate dashboard visualizations with sample data",
            "status": "pending",
            "parentTaskId": 12
          },
          {
            "id": 3,
            "title": "Create Flashcard Organization and Spaced Repetition System",
            "description": "Set up a system to organize 30-50 flashcards and integrate with the Flash-Memory Layer of HPE for spaced repetition and long-term retention.",
            "dependencies": [
              1
            ],
            "details": "Implementation steps:\n1. Design a flashcard data structure with fields for question, answer, category, difficulty rating, and metadata (creation date, last reviewed date)\n2. Implement tagging and categorization features for flashcards\n3. Create an interface for adding, editing, and reviewing flashcards\n4. Develop a spaced repetition algorithm that schedules reviews based on difficulty ratings and review history\n5. Design integration points with the HPE Flash-Memory Layer\n6. Implement export/import functionality for flashcard decks\n7. Add analytics to track retention rates and identify difficult cards\n\nTesting approach:\n- Test the spaced repetition algorithm with sample flashcards\n- Verify proper scheduling of reviews\n- Test integration with HPE Flash-Memory Layer\n- Validate analytics calculations",
            "status": "pending",
            "parentTaskId": 12
          },
          {
            "id": 4,
            "title": "Integrate and Test Complete Learning Reflection and Progress Tracking System",
            "description": "Integrate all components, ensure comprehensive HPE system integration, and test the effectiveness of the complete system in supporting reflection and learning.",
            "dependencies": [
              2,
              3
            ],
            "details": "Implementation steps:\n1. Create a unified interface that connects the reflection template, progress tracking, and flashcard systems\n2. Implement cross-component functionality (e.g., automatically generating flashcards from challenging concepts in reflections)\n3. Ensure consistent data flow between all components\n4. Develop comprehensive HPE integration by connecting to both Task Master and Flash-Memory Layer\n5. Create holistic reporting that combines insights from all components\n6. Implement user settings for customizing the system\n7. Develop a notification system for scheduled reflections and reviews\n\nTesting approach:\n- Conduct end-to-end testing of the complete workflow\n- Test data consistency across all components\n- Verify all HPE integration points function correctly\n- Perform usability testing to ensure the system effectively supports learning\n- Test the system with a complete learning cycle on a real subject",
            "status": "pending",
            "parentTaskId": 12
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/HPE_SYSTEM/HPE_Reflection_Progress_Tracking_PRD.md",
          "csm_id": "HPE.ToolDev.ReflectionSystem.V1",
          "anchor_link": "#reflection-progress-tracking-system-design"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "Design, implement, and validate a learning reflection and progress tracking system for the HPE platform, supporting integration with Task Master and flashcard tools.",
          "estimated_effort_tshirt": "XL",
          "estimated_effort_hours_raw": "8-16 hours",
          "estimated_effort_hours_min": 8,
          "estimated_effort_hours_max": 16,
          "mastery_criteria_summary": "Fully functional reflection and tracking system deployed, passing all integration and usability tests.",
          "activity_type": "software_development",
          "recommended_block": "deep_work",
          "deliverables": [
            "User-facing reflection template and interface",
            "Integrated progress tracking dashboard",
            "Automated flashcard generation from reflections",
            "Comprehensive system documentation",
            "End-to-end integration with Task Master and flashcard tools"
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "HPE System Development",
          "csm_tags": [
            "hpe_system_dev",
            "reflection_tool",
            "progress_tracking",
            "integration",
            "software_development"
          ]
        },
        "labels": [
          "domain:hpe_system",
          "pillar:platform",
          "project:reflection_tracker",
          "block:deep_work",
          "activity:software_development",
          "effort_tshirt:XL"
        ]
      },
      {
        "id": 14,
        "title": "Implement Standardized Project Task Runner (Taskfile)",
        "description": "Evaluate, select, and implement a project-wide command-line task runner using Go Task with Taskfile.yml to standardize commands for all common development and operational tasks.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Implement a standardized task runner using Go Task to provide consistent commands for development, operational, and utility tasks, enhancing developer experience and automation.",
        "testStrategy": "Verify that all defined tasks in the Taskfile.yml execute correctly across platforms (Linux, macOS, Windows/WSL), that documentation is clear and validated by a peer, that error handling is robust, and that no significant performance overhead is introduced. A verification checklist must be completed before marking this task as done.",
        "hpe_csm_reference": {
          "source_document": "cultivation/outputs/deep_work_candidates/task_plans/ia_layer_plan.json",
          "csm_id": "DW_IA_TOOLING_001",
          "anchor_link": null
        },
        "hpe_learning_meta": {
          "task_objective_summary": "To implement a project-wide command-line task runner (Go Task with Taskfile.yml) to provide standardized, discoverable, and easily memorable commands for all common development, build, test, and operational tasks.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "1-2 days",
          "estimated_effort_hours_min": 6,
          "estimated_effort_hours_max": 12,
          "mastery_criteria_summary": "A functional Taskfile.yml is committed to the project root, covering all key task categories. Developer documentation is updated with new setup and usage instructions. At least one CI workflow is refactored to use the task runner.",
          "activity_type": "devops_tooling_implementation",
          "recommended_block": "deep_work",
          "deliverables": [
            "A well-documented Taskfile.yml at the project root.",
            "Standardized commands for at least 7-10 key development lifecycle operations.",
            "Updated developer setup documentation in README.md or DEVELOPMENT.md.",
            "At least one CI workflow refactored to use the new task commands."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "P0: Infrastructure & Automation Layer",
          "csm_tags": [
            "p0_foundations",
            "ia_layer",
            "tooling",
            "dx"
          ]
        },
        "labels": [
          "domain:ia_layer",
          "pillar:tooling",
          "type:devops",
          "block:deep_work",
          "effort_tshirt:M"
        ],
        "subtasks": [
          {
            "id": 1,
            "title": "Install and configure Go Task",
            "description": "Install Go Task locally and ensure it's available in the development environment. This may involve updating PATH or installing via a package manager.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 14
          },
          {
            "id": 2,
            "title": "Create root Taskfile.yml with basic structure",
            "description": "Initialize the `Taskfile.yml` at the project root with the version declaration and a `vars` section for common paths like the Python venv and cultivation root.",
            "status": "done",
            "dependencies": [
              1
            ],
            "parentTaskId": 14
          },
          {
            "id": 3,
            "title": "Implement 'Setup' tasks",
            "description": "Create tasks for initial environment setup, including Python virtual environment creation and dependency installation (`task setup`).",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 14
          },
          {
            "id": 4,
            "title": "Implement 'Development' tasks",
            "description": "Create namespaced or grouped tasks for `lint` (Python, Markdown) and `test` (pytest suite).",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 14
          },
          {
            "id": 5,
            "title": "Implement 'Documentation' tasks",
            "description": "Create tasks for building (`task docs:build`), serving locally (`task docs:serve`), and deploying the MkDocs site (`task docs:deploy`).",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 14
          },
          {
            "id": 6,
            "title": "Implement 'Operational' tasks for key pipelines",
            "description": "Create wrapper tasks for running key project pipelines, such as `task run:dev-reflect`, `task run:sync-wellness`, and `task run:process-runs`.",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 14
          },
          {
            "id": 7,
            "title": "Implement 'Utility' tasks",
            "description": "Create utility tasks like `clean` to remove temporary files and caches.",
            "status": "done",
            "dependencies": [
              2
            ],
            "parentTaskId": 14
          },
          {
            "id": 8,
            "title": "Document all commands in Taskfile.yml",
            "description": "Ensure every task and namespace in the Taskfile has a clear `desc:` field explaining its purpose and usage.",
            "status": "done",
            "dependencies": [
              3,
              4,
              5,
              6,
              7
            ],
            "parentTaskId": 14
          },
          {
            "id": 9,
            "title": "Update project README with Task Runner instructions",
            "description": "Refactor the main `README.md` to guide developers to use the new task runner for setup and daily operations.",
            "status": "done",
            "dependencies": [
              8
            ],
            "parentTaskId": 14
          },
          {
            "id": 10,
            "title": "Refactor one CI workflow to use Task Runner",
            "description": "As a proof of concept, refactor one existing GitHub Actions workflow (e.g., `markdown-lint.yml`) to call a `task` command instead of the raw script call.",
            "status": "done",
            "dependencies": [
              8
            ],
            "parentTaskId": 14
          }
        ]
      },
      {
        "id": 15,
        "title": "Mastery: RNA Monomer Biophysics",
        "description": "Systematic learning of the RNA monomer document using the pre-testing workflow.",
        "details": "This task involves a deep dive into the biophysical properties of RNA monomers. Key activities include:\n1.  Thoroughly reading and understanding the designated RNA monomer document.\n2.  Utilizing the pre-testing workflow to identify knowledge gaps.\n3.  Creating flashcards, notes, or other learning aids for key concepts.\n4.  Focusing on aspects like chemical structure, charge distribution, conformational flexibility, and interactions relevant to RNA folding and function.",
        "testStrategy": "Mastery will be assessed through:\n1.  Successful completion of a post-learning assessment (e.g., a quiz or self-test) with a target score (e.g., >90%).\n2.  Ability to explain key concepts from the document without referring to notes.\n3.  Demonstrating understanding by applying learned concepts to simple hypothetical scenarios or problem-solving exercises related to RNA monomer biophysics.\n4.  Confirmation that all identified knowledge gaps from the pre-testing phase have been addressed.",
        "status": "in-progress",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Integrate jarc_reactor Codebase & Establish ARC Sprint Environment",
        "description": "Epic foundational task for Track A of the ARC Prize sprint: transform jarc-reactor from an external asset into a fully integrated, quality-assured, and testable component of the Cultivation project, establishing the baseline for all future ARC Prize work.",
        "details": "This task is the cornerstone of the ARC Prize sprint, activating the baseline, enforcing Cultivation's Infrastructure & Automation (IA) Layer standards, and providing the testbed for all future ARC experimentation.\n\nStrategic Purpose:\n- De-risk the sprint by establishing a robust, operational baseline.\n- Enforce code quality and prevent technical debt from day one.\n- Provide a stable, standardized platform for all future R&D.\n\nDependency Graph (see mermaid diagram in project docs):\n16.1 → 16.2 → 16.3 → (16.4 & 16.6) → 16.5 → 16.7\n\nSee subtasks for detailed risk analysis, mitigation strategies, and workflow guidance.",
        "testStrategy": "Definition of Done (Checklist):\n1. Confirm jarc_reactor has been properly integrated using git subtree with full history preserved.\n2. Verify all dependencies are harmonized in the root requirements.txt with no conflicts.\n3. Validate IA Layer compliance through pre-commit hooks and code standards.\n4. Ensure ARC dataset is properly configured and accessible.\n5. Check that documentation is complete and accurate.\n6. Verify CI workflow is implemented and functioning.\n7. Confirm successful end-to-end training cycle on ARC data.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Structure Repo: `git subtree` & Import Path Refactoring",
            "description": "Use `git subtree` to merge jarc_reactor into `cultivation/systems/arc_reactor/` with full history. Then, refactor all internal Python import paths to be absolute from the `cultivation` root, or bridge temporarily with PYTHONPATH in Taskfile targets.",
            "dependencies": [],
            "status": "done",
            "hpe_learning_meta": {
              "estimated_effort_hours_min": 2.5,
              "estimated_effort_hours_max": 5,
              "recommended_block": "deep_work"
            },
            "risks": "Refactoring all import paths is time-consuming and error-prone. A single missed import can break the entire system.",
            "mitigation": "Use an IDE with project-wide refactoring tools. Create a specific test commit after refactoring and run all tests. Consider the PYTHONPATH bridge as a temporary measure to unblock other subtasks if refactoring proves too complex initially.",
            "implementation_details": {
              "steps": [
                "Use `git subtree` to merge the `jarc_reactor` repository into `cultivation/systems/arc_reactor/`, preserving its entire commit history",
                "Update all internal Python import paths to be absolute from the `cultivation` root",
                "Ensure proper directory structure within the Cultivation project",
                "Add appropriate README documentation explaining the integration",
                "Ensure .gitignore is updated to handle any new patterns"
              ],
              "testing": [
                "Verify the repository structure is correct",
                "Ensure all files are properly integrated with history preserved",
                "Check that import paths are correctly updated to use absolute paths",
                "Confirm documentation is clear and accurate"
              ]
            }
          },
          {
            "id": 2,
            "title": "Harmonize Dependencies",
            "description": "Analyze `jarc-reactor/requirements.txt`, merge dependencies into the root `requirements.txt`. Resolve version conflicts by defaulting to the newer version, then validate the unified environment using `pip check` and by running both projects' test suites.",
            "dependencies": [
              1
            ],
            "status": "done",
            "hpe_learning_meta": {
              "estimated_effort_hours_min": 1,
              "estimated_effort_hours_max": 4,
              "recommended_block": "deep_work"
            },
            "risks": "A newer dependency version required by Cultivation breaks a critical function in jarc-reactor, leading to extensive debugging ('dependency hell').",
            "mitigation": "Immediately run both test suites after merging requirements. If major breaks occur, use `pipdeptree` to analyze the conflict and be prepared to pin a specific dependency to an older, compatible version as a short-term fix, creating a follow-up tech debt task."
          },
          {
            "id": 3,
            "title": "Implement IA Layer Compliance",
            "description": "Run `pre-commit run --all-files` and fix all `black`, `ruff`, and `isort` issues. Refactor all `logging` calls to use the Cultivation project's standard logger. Add `arc:lint` and `arc:test` targets to the root `Taskfile.yml`.",
            "dependencies": [
              2
            ],
            "status": "done",
            "hpe_learning_meta": {
              "estimated_effort_hours_min": 1.5,
              "estimated_effort_hours_max": 3,
              "recommended_block": "focused_dev_block"
            },
            "clarification": "IA stands for Infrastructure & Automation in the Cultivation context.",
            "risks": "The initial pre-commit run may generate thousands of changes, making the commit noisy and hard to review.",
            "mitigation": "Perform the automated formatting in a single, isolated commit with a clear message (e.g., 'style: Apply pre-commit formatting to arc_reactor'). Then, perform the manual logging refactor in a separate commit."
          },
          {
            "id": 4,
            "title": "Configure ARC Dataset Environment",
            "description": "Download the official ARC dataset to `cultivation/data/raw/arc_prize_2025/`. Create an override config file for `jarc-reactor` pointing to this path. Audit and adapt `jarc-reactor`'s data loaders to parse the official ARC JSON format.",
            "dependencies": [
              3
            ],
            "status": "pending",
            "hpe_learning_meta": {
              "estimated_effort_hours_min": 2,
              "estimated_effort_hours_max": 5,
              "recommended_block": "deep_work"
            },
            "risks": "The official ARC dataset structure has subtle differences from what `jarc-reactor`'s data loaders expect, requiring significant refactoring of `data_preparation.py`.",
            "mitigation": "Start by writing a small, standalone script to parse just one ARC task file. Once that works, integrate the logic into the main data loader. Test with a diverse sample of at least 10-15 ARC tasks."
          },
          {
            "id": 5,
            "title": "Create CI Workflow",
            "description": "Implement `arc-reactor-ci.yml` GitHub Actions workflow. Configure it to run `arc:lint` and `arc:test` targets. Trigger workflow only on changes to relevant paths (e.g., `cultivation/systems/arc_reactor/**`) for efficiency.",
            "dependencies": [
              4,
              6
            ],
            "status": "done",
            "hpe_learning_meta": {
              "estimated_effort_hours_min": 1,
              "estimated_effort_hours_max": 2.5,
              "recommended_block": "focused_dev_block"
            },
            "refinement": "Use `on.<push/pull_request>.paths` in the workflow file to limit triggers.",
            "risks": "CI environment has pathing or caching issues not present locally.",
            "mitigation": "Use `act` to test workflow locally if possible. Add extensive logging and debug steps to the CI file during initial setup.",
            "implementation_details": {
              "steps": [
                "Create a new GitHub Actions workflow file (`arc-reactor-ci.yml`)",
                "Configure the workflow to run the new `arc:lint` and `arc:test` targets on relevant PRs",
                "Set up appropriate triggers for the workflow",
                "Configure proper caching of dependencies to speed up CI runs",
                "Ensure the workflow provides clear feedback on failures",
                "Test the workflow with both passing and failing scenarios"
              ],
              "testing": [
                "Create test PRs to verify the workflow triggers correctly",
                "Introduce deliberate linting errors to verify detection",
                "Introduce test failures to verify proper reporting",
                "Check that the workflow completes in a reasonable time",
                "Verify caching is working as expected"
              ]
            }
          },
          {
            "id": 6,
            "title": "Document Integrated System",
            "description": "Create `cultivation/systems/arc_reactor/README.md`. As a living document, it should explain the integrated setup, how to use the new Taskfile targets, and the ARC dataset configuration.",
            "dependencies": [
              3
            ],
            "status": "done",
            "hpe_learning_meta": {
              "estimated_effort_hours_min": 0.5,
              "estimated_effort_hours_max": 1.5,
              "recommended_block": "flex-slot"
            },
            "risks": "Documentation becomes outdated as other subtasks are completed.",
            "mitigation": "Draft the README early, but perform a final pass to update it as the very last step before the 'First Light' test."
          },
          {
            "id": 7,
            "title": "Perform \"First Light\" Integration Test",
            "description": "Execute a complete, short, end-to-end training cycle on a small subset of ARC data using the `task arc:run-baseline` target. Success is defined as the run completing without errors and saving a model checkpoint. Document the process and results in a concise validation report.",
            "dependencies": [
              6
            ],
            "status": "done",
            "hpe_learning_meta": {
              "estimated_effort_hours_min": 1,
              "estimated_effort_hours_max": 4,
              "recommended_block": "deep_work"
            },
            "risks": "An unforeseen integration error emerges only when all components run together.",
            "mitigation": "Run with a debugger attached. Analyze logs from the full run to trace the error. Be prepared to revisit and patch previous subtasks.",
            "implementation_details": {
              "steps": [
                "Run a short, end-to-end training cycle on a small subset of ARC data",
                "Confirm the entire integrated system functions without errors",
                "Verify that the system successfully saves a model checkpoint",
                "Analyze logs for any warnings or potential issues",
                "Document the test process and results",
                "Create a validation report with performance metrics"
              ],
              "testing": [
                "Select a representative subset of ARC tasks for the test",
                "Monitor system resource usage during the test",
                "Validate that checkpoints are properly saved and can be loaded",
                "Check that all components interact correctly through the IA layer",
                "Document any issues discovered and their resolutions",
                "Create a final integration report documenting the system's readiness"
              ]
            }
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/WORK_IN_PROGRESS/arc_agi_plan.json",
          "csm_id": "DW_ARC_JR_INTEGRATE_001",
          "anchor_link": null
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "To establish a robust, standardized, and well-understood development environment for `jarc-reactor` as the foundation for the ARC Prize sprint.",
          "estimated_effort_tshirt": "L",
          "estimated_effort_hours_raw": "3-5 days",
          "estimated_effort_hours_min": 15,
          "estimated_effort_hours_max": 25,
          "mastery_criteria_summary": "jarc-reactor environment is fully set up, IA standards are applied, and a baseline training run on ARC data completes successfully.",
          "activity_type": "systems_integration_devops_setup",
          "recommended_block": "deep_work",
          "deliverables": [
            "Configured `jarc-reactor` dev environment within Cultivation.",
            "Updated `Taskfile.yml` with `arc:*` targets.",
            "Functional `arc-reactor-ci.yml` GitHub Actions workflow.",
            "Documentation for the integrated system (`README.md`).",
            "A final validation report from the 'First Light' integration test."
          ],
          "actionable_advice_for_execution": "1.  **Commit Atomically:** As you complete each subtask, create a separate, atomic Git commit. This will make your work easy to review and, if necessary, revert. E.g., `feat(arc): [16.1] Integrate jarc-reactor via git subtree`, `refactor(arc): [16.1] Refactor internal import paths`.\n2.  **Follow the Dependency Chain:** Execute the subtasks in the defined order, taking advantage of the parallelization opportunity for 16.4 and 16.5.\n3.  **Use Taskmaster to Track Progress:** As you start and finish each subtask, update its status using `task-master set-status --id <subtask_id> --status <done|in-progress>`. This maintains a live record of your progress through this epic.\n4.  **Embrace the `PYTHONPATH` Bridge (Temporarily):** Do not get bogged down for days on subtask 16.1's import refactoring. If it proves difficult, implement the `PYTHONPATH` workaround in your `Taskfile.yml`, document it as tech debt, and move on to subtasks 16.2 and 16.3 to maintain momentum. You can circle back to the full refactor later."
        },
        "hpe_scheduling_meta": {
          "curriculum_part_title": "ARC Sprint: P0 - Foundational Integration",
          "csm_tags": [
            "arc_sprint",
            "jarc_reactor",
            "setup",
            "ia_layer",
            "track_a",
            "epic"
          ]
        },
        "labels": [
          "domain:arc_sprint",
          "component:ia_layer",
          "activity:systems_integration",
          "block:deep_work",
          "effort_tshirt:L",
          "track:A"
        ]
      },
      {
        "id": 17,
        "title": "OBSOLETE - See Task 19: Implement FSRS Algorithm for Spaced Repetition Scheduling",
        "description": "Implement the core Free Spaced Repetition Scheduler (FSRS) algorithm in flashcore.scheduler.py to calculate card stability, difficulty, and next review date based on review history and rating.",
        "details": "This task involves implementing the FSRS algorithm which is essential for the spaced repetition functionality. The implementation should:\n\n1. Create a function that accepts two parameters: a card's review history (list of previous reviews with timestamps, ratings, etc.) and a new rating (typically on a scale of 1-4 where 1=Again, 2=Hard, 3=Good, 4=Easy).\n\n2. Calculate the following based on the FSRS algorithm:\n   - New stability value (how well the information is retained)\n   - Updated difficulty value (how challenging the card is for the user)\n   - Next optimal review date/time\n\n3. The implementation should follow the mathematical model from the FSRS paper, including:\n   - Forgetting curve calculation\n   - Difficulty adjustment based on rating\n   - Stability calculation with memory decay\n\n4. The function should handle edge cases such as:\n   - First-time reviews (no history)\n   - Lapsed cards (failed reviews)\n   - Very high stability cards\n\n5. Ensure the implementation is computationally efficient as it will be called frequently during review sessions.\n\n6. Document the code thoroughly with explanations of the algorithm steps and parameter meanings.\n\n7. Expose appropriate configuration parameters to allow future tuning of the algorithm (e.g., forgetting curve parameters).",
        "testStrategy": "Testing should verify both the correctness of the algorithm implementation and its behavior in various scenarios:\n\n1. Unit tests:\n   - Test with known input/output pairs from published FSRS examples\n   - Verify all edge cases (first review, failed review, perfect recall)\n   - Test boundary conditions for ratings and history lengths\n\n2. Property-based tests:\n   - Verify that higher ratings result in longer intervals\n   - Confirm that repeated good ratings increase stability over time\n   - Check that difficulty decreases with consistent good ratings\n\n3. Regression tests:\n   - Create a dataset of review histories and expected outputs\n   - Ensure algorithm changes don't unexpectedly alter scheduling behavior\n\n4. Performance tests:\n   - Measure execution time for various history lengths\n   - Ensure scheduling calculations complete within acceptable time limits\n\n5. Integration tests:\n   - Verify the scheduler interacts correctly with the card storage system\n   - Test the full review workflow from card presentation to rescheduling\n\nCreate a test harness that allows visualizing the scheduling behavior over simulated review sequences to validate the algorithm produces sensible spacing intervals.",
        "status": "done",
        "dependencies": [],
        "priority": "critical",
        "subtasks": [],
        "labels": [],
        "hpe_csm_reference": {
          "source_document": "",
          "csm_id": "",
          "anchor_link": null
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "",
          "estimated_effort_tshirt": "",
          "estimated_effort_hours_raw": "",
          "estimated_effort_hours_min": 0,
          "estimated_effort_hours_max": 0,
          "mastery_criteria_summary": "",
          "activity_type": "",
          "recommended_block": "",
          "deliverables": []
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "",
          "csm_tags": []
        }
      },
      {
        "id": 18,
        "title": "OBSOLETE - See Task 20 & 22 for Card Data Model and Storage",
        "description": "Design and implement the data model for flashcards (e.g., fields for front, back, creation_date, last_review_date, next_review_date, stability, difficulty, review_history) and choose a storage mechanism (e.g., JSON file, SQLite database).",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          17
        ],
        "priority": "critical",
        "subtasks": [],
        "labels": [
          "project:Flashcore MVP",
          "epic:Flashcore MVP Core Functionality",
          "sprint:Sprint 1: Core Algorithm and Data Model",
          "block:deep_work",
          "activity:software_development",
          "effort_tshirt:M"
        ],
        "hpe_csm_reference": {
          "source_document": "",
          "csm_id": "",
          "anchor_link": null
        },
        "hpe_learning_meta": {
          "learning_objective_summary": "",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "4-6 hours",
          "estimated_effort_hours_min": 4,
          "estimated_effort_hours_max": 6,
          "mastery_criteria_summary": "",
          "activity_type": "software_development",
          "recommended_block": "deep_work",
          "deliverables": []
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "",
          "csm_tags": []
        }
      },
      {
        "id": 19,
        "title": "[Flashcore] Integrate FSRS Library for Core Scheduling in `flashcore.scheduler`",
        "description": "Implement the Free Spaced Repetition Scheduling (FSRS) algorithm by integrating a suitable library into the flashcore.scheduler module. This will compute updated stability, difficulty, and the next review date from a card’s review history and a new rating.",
        "details": "1. Research and select a suitable, well-maintained Python FSRS library (e.g., open-spaced-repetition, fsrs-optimizer, pyFSRS). Evaluate based on features, ease of use, maintenance, and license.\n2. In `flashcore/scheduler.py`, define `FSRS_Scheduler` class. Implement a wrapper method `compute_next_state(history: List[Review], new_rating: int, review_ts: datetime) -> Dict` that calls the chosen library.\n3. Map `flashcore.card.Review` objects and ratings to the library's expected input format.\n4. Map the library's output (new stability, difficulty, next due date) back to the expected `Dict` structure.\n5. Use `flashcore/config.py` for any library-specific configurations or default FSRS parameters if not handled by the library.\n6. Include comprehensive type hints, docstrings, and DEBUG-level logging for the wrapper.",
        "testStrategy": "• Unit tests in `tests/flashcore/test_scheduler.py` using pytest:\n  - Test the wrapper's translation of inputs/outputs to/from the selected FSRS library.\n  - Parameterize known input/output pairs from FSRS publications/examples, adapted for the library.\n  - Test edge cases: empty history, rating=0 (Again) resets stability, etc.\n  - Test invalid rating inputs raise `ValueError`.\n• Logging test using pytest’s `caplog` to confirm DEBUG messages.",
        "status": "done",
        "dependencies": [],
        "priority": "critical",
        "subtasks": [
          {
            "id": 1,
            "title": "Research and select a suitable Python FSRS library",
            "description": "Evaluate available Python FSRS libraries based on features, maintenance, license, and ease of integration. Document the choice and rationale.",
            "dependencies": [],
            "status": "done",
            "risks": "Analysis paralysis; spending excessive time on selection. Chosen library could be unmaintained or have a restrictive license.",
            "mitigation": "Time-box research to 2-3 hours. Prioritize libraries with recent commit activity, good documentation, and a permissive license (MIT, Apache 2.0). Create a small ADR to document the final choice.",
            "implementation_details": {
              "steps": [
                "1. Identify candidate libraries: open-spaced-repetition, fsrs-optimizer, pyFSRS, etc.",
                "2. Compare licenses for compatibility with the project.",
                "3. Evaluate API clarity, documentation quality, and maintenance status (e.g., last commit date, open issues).",
                "4. Create a small proof-of-concept for the top 1-2 candidates to test ease of integration.",
                "5. Document the final choice and reasoning in a project note or ADR."
              ],
              "testing": [
                "N/A (This is a research subtask)."
              ]
            }
          },
          {
            "id": 2,
            "title": "Implement the FSRS_Scheduler class as a wrapper",
            "description": "Develop the `FSRS_Scheduler` class in `flashcore.scheduler` to wrap the chosen FSRS library, handling input/output translation and configuration.",
            "dependencies": [
              1
            ],
            "status": "done",
            "risks": "The chosen library's API may have subtle behaviors or require complex input data structures. An upstream library update could introduce breaking changes.",
            "mitigation": "Pin the library's version in `requirements.txt`. Write clear data mapping functions to translate between `flashcore.card.Review` and the library's internal format. Add extensive logging.",
            "implementation_details": {
              "steps": [
                "1. Create `flashcore/config.py` and define default FSRS parameters.",
                "2. In `flashcore/scheduler.py`, create the `FSRS_Scheduler` class.",
                "3. Implement the `compute_next_state` method.",
                "4. Inside the method, write helper functions to convert `List[Review]` into the format required by the library (e.g., a sequence of ratings and intervals).",
                "5. Call the library's scheduling function.",
                "6. Map the library's output object back to a `Dict` that matches the `Review` model's fields."
              ],
              "testing": [
                "Unit tests will verify that the mapping functions handle various data types correctly (datetimes, integers, floats)."
              ]
            }
          },
          {
            "id": 3,
            "title": "Write comprehensive unit tests for the FSRS wrapper",
            "description": "Create tests in `tests/flashcore/test_scheduler.py` for the wrapper, covering various scenarios, edge cases, and library interactions.",
            "dependencies": [
              2
            ],
            "status": "done",
            "risks": "Tests become too coupled to the specific library's API, making it hard to switch libraries later. Lack of official test vectors for the library.",
            "mitigation": "Abstract test cases to test the FSRS *concept* (e.g., 'a low rating should result in a shorter interval'). Use examples from FSRS research papers as a source for test vectors if the library lacks them.",
            "implementation_details": {
              "steps": [
                "1. Set up `tests/flashcore/test_scheduler.py` with pytest.",
                "2. Create a test case for the first review of a new card.",
                "3. Create test cases for subsequent reviews with all possible ratings.",
                "4. Create a test case for a lapsed card (a review long after its due date).",
                "5. Add a test to ensure invalid ratings (e.g., 5) raise an appropriate error."
              ],
              "testing": [
                "Run tests with `pytest --cov` to ensure high test coverage for the `scheduler.py` module."
              ]
            }
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/outputs/deep_work_candidates/task_plans/flashcore_plan.json",
          "csm_id": "DW_FC_SCHED_001",
          "anchor_link": null
        },
        "hpe_learning_meta": {
          "task_objective_summary": "Integrate a robust FSRS library to enable dynamic review interval calculation, mitigating risks of a from-scratch implementation.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "6-10h",
          "estimated_effort_hours_min": 6,
          "estimated_effort_hours_max": 10,
          "completion_criteria_summary": "FSRS library wrapper correctly calculates stability, difficulty, and next review date based on test vectors; unit tests pass with high coverage.",
          "activity_type": "algorithm_implementation_library_integration",
          "recommended_block": "deep_work",
          "deliverables": [
            "flashcore/scheduler.py",
            "flashcore/config.py",
            "tests/flashcore/test_scheduler.py"
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "Flashcore MVP - Scheduling",
          "csm_tags": [
            "flashcore",
            "fsrs",
            "scheduling",
            "library_integration"
          ]
        },
        "labels": [
          "project_dev",
          "component:flashcore",
          "epic:mvp",
          "type:library_integration",
          "module:scheduler",
          "priority:critical",
          "block:deep_work",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 20,
        "title": "[Flashcore] Implement `ReviewSessionManager` in flashcore/review_manager.py",
        "description": "Develop the backend logic to manage a review session. This involves fetching due cards from the `FlashcardDatabase`, using the FSRS scheduler for updates, and saving review results.",
        "details": "1. Define `ReviewSessionManager` class in `flashcore/review_manager.py`.\n2. Constructor `__init__(self, db: FlashcardDatabase)`.\n3. Method `start_session(self, limit: int = 20) -> None`: fetches due cards using `db.get_due_cards` and populates an internal queue.\n4. Method `get_next_card(self) -> Optional[Card]`: returns the next card from the queue or None.\n5. Method `submit_review(self, card_uuid: UUID, rating: int, resp_ms: Optional[int]) -> Review`: retrieves card history from `db`, calls the FSRS scheduler, constructs a new `Review` object, and saves it to the `db` via `db.add_review()`.\n6. Method `get_due_card_count(self) -> int`: returns the total number of cards currently due for review.",
        "testStrategy": "• Unit tests in `tests/flashcore/test_review_manager.py` using pytest and mocks for `FlashcardDatabase` and `FSRS_Scheduler`.\n  - `start_session`: verify `db.get_due_cards` is called correctly.\n  - `submit_review`: mock scheduler return values, verify `db.add_review` is called with a correctly constructed `Review` object.\n• Integration test using an in-memory `FlashcardDatabase`.",
        "status": "done",
        "dependencies": [
          19
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Define ReviewSessionManager class structure",
            "description": "Create the `ReviewSessionManager` class with its constructor and internal state attributes (e.g., `self.db`, `self.scheduler`, `self.review_queue`).",
            "dependencies": [],
            "status": "done"
          },
          {
            "id": 2,
            "title": "Implement `start_session` and `get_next_card` methods",
            "description": "Develop the logic to fetch due cards and manage the session queue.",
            "dependencies": [
              1
            ],
            "status": "done",
            "risks": "The `db.get_due_cards` query might be slow for a very large database.",
            "mitigation": "Ensure the underlying database query is indexed and optimized. For now, accept the performance as-is for the MVP."
          },
          {
            "id": 3,
            "title": "Implement `submit_review` method",
            "description": "Develop the core logic to update a card's state after a review, integrating with the FSRS scheduler and database.",
            "dependencies": [
              1
            ],
            "status": "done",
            "risks": "Incorrectly calculating `elapsed_days_at_review` passed to FSRS, leading to scheduling errors.",
            "mitigation": "Write a specific helper function for this calculation that handles both first-time reviews (delta from `card.added_at`) and subsequent reviews (delta from previous `review.ts`). Cover these cases in unit tests.",
            "implementation_details": {
              "steps": [
                "1. Fetch the card's full review history from the database.",
                "2. Calculate `elapsed_days_at_review` based on the history.",
                "3. Instantiate `FSRS_Scheduler` and call `compute_next_state`.",
                "4. Construct a new `Review` Pydantic model with all required fields from the card and scheduler output.",
                "5. Call `db.add_review` to persist the new review object."
              ]
            }
          },
          {
            "id": 4,
            "title": "Implement `get_due_card_count` method",
            "description": "Develop the method to return the count of due cards.",
            "dependencies": [
              1
            ],
            "status": "done"
          },
          {
            "id": 5,
            "title": "Write unit and integration tests for ReviewSessionManager",
            "description": "Create tests in `tests/flashcore/test_review_manager.py` covering all methods and edge cases, using mocks and an in-memory DB.",
            "dependencies": [
              2,
              3,
              4
            ],
            "status": "done",
            "risks": "Mocks for the database and scheduler become overly complex and brittle.",
            "mitigation": "Prioritize a full integration test using an in-memory DuckDB instance to validate the end-to-end flow, reducing reliance on complex mocks for the core `submit_review` logic."
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/outputs/deep_work_candidates/task_plans/flashcore_plan.json",
          "csm_id": "DW_FC_REVIEW_001"
        },
        "hpe_learning_meta": {
          "task_objective_summary": "Develop the backend logic for managing flashcard review sessions, including fetching cards, processing reviews, and updating card states.",
          "estimated_effort_tshirt": "L",
          "estimated_effort_hours_raw": "8-12h",
          "estimated_effort_hours_min": 8,
          "estimated_effort_hours_max": 12,
          "completion_criteria_summary": "ReviewSessionManager correctly fetches due cards, processes reviews using FSRS, updates card data, and has comprehensive unit tests.",
          "activity_type": "application_logic_development",
          "recommended_block": "deep_work",
          "deliverables": [
            "flashcore/review_manager.py",
            "tests/flashcore/test_review_manager.py"
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "Flashcore MVP - Review Logic",
          "csm_tags": [
            "flashcore",
            "backend",
            "review"
          ]
        },
        "labels": [
          "project_dev",
          "component:flashcore",
          "epic:mvp",
          "type:backend_logic",
          "module:review_manager",
          "priority:high",
          "block:deep_work",
          "effort_tshirt:L"
        ]
      },
      {
        "id": 21,
        "title": "[Flashcore] Develop Review UI (CLI MVP) in `flashcore.cli.review_ui`",
        "description": "Create a command-line interface (CLI) for users to review flashcards. This UI will interact with the `ReviewSessionManager` to fetch cards and submit review outcomes.",
        "details": "1. In `flashcore/cli/review_ui.py`, define a function `start_review_flow(manager: ReviewSessionManager)`.\n2. Call `manager.start_session()` to load due cards.\n3. Loop while `manager.get_next_card()` returns a card:\n   a. Display card front content (e.g., `card.front`).\n   b. Prompt user to show answer (e.g., press Enter).\n   c. Display card back content (e.g., `card.back`).\n   d. Prompt user for rating (e.g., 1:Again, 2:Hard, 3:Good, 4:Easy). Validate input.\n   e. Record response time (optional, `resp_ms`).\n   f. Call `manager.submit_review(card.uuid, rating, resp_ms)`.\n   g. Display next review date or feedback.\n4. Handle cases: no due cards, session completion.\n5. Provide clear instructions and progress indicators (e.g., 'Card X of Y').",
        "testStrategy": "• Manual testing: Run the CLI flow with a `ReviewSessionManager` connected to a test database.\n  - Verify card presentation, rating input, and session progression.\n  - Check behavior with no due cards and after completing all cards.\n• Unit tests in `tests/cli/test_review_ui.py` (using `pytest-mock` for `ReviewSessionManager`):\n  - Test card display and rating input loop.\n  - Test session start/completion messages.",
        "status": "done",
        "dependencies": [
          20
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Design basic CLI interaction flow",
            "description": "Outline the sequence of prompts, card display, and user inputs for a single card review cycle.",
            "dependencies": [],
            "status": "done",
            "risks": "The interaction flow is clunky or unintuitive.",
            "mitigation": "Sketch the flow on paper first, simulating a user session. Prioritize clarity and minimal required keystrokes."
          },
          {
            "id": 2,
            "title": "Implement card content display",
            "description": "Write code to present the front and back content, potentially using the `rich` library for better rendering.",
            "dependencies": [
              1
            ],
            "status": "done",
            "risks": "Complex Markdown or KaTeX in cards breaks terminal rendering.",
            "mitigation": "Use `rich.markdown.Markdown` which handles many cases gracefully. For unsupported elements, showing the raw Markdown/KaTeX is an acceptable fallback for the MVP."
          },
          {
            "id": 3,
            "title": "Implement rating input and processing",
            "description": "Write code to prompt for a rating (1-4), validate it, and call `ReviewSessionManager.submit_review`.",
            "dependencies": [
              2
            ],
            "status": "done",
            "risks": "User enters invalid input (e.g., 'text', 5), crashing the program.",
            "mitigation": "Implement a robust input validation loop that handles non-integer input and out-of-range numbers, re-prompting the user with a clear error message."
          },
          {
            "id": 4,
            "title": "Implement main session loop",
            "description": "Develop the main loop to iterate through all due cards fetched by the `ReviewSessionManager`, showing session progress.",
            "dependencies": [
              1
            ],
            "status": "done"
          },
          {
            "id": 5,
            "title": "Add session boundary messages and error handling",
            "description": "Implement clear messages for starting a session, completing a session, and handling the case where there are no cards due.",
            "dependencies": [
              4
            ],
            "status": "done"
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/outputs/deep_work_candidates/task_plans/flashcore_plan.json",
          "csm_id": "DW_FC_REVIEW_002"
        },
        "hpe_learning_meta": {
          "task_objective_summary": "Build an interactive CLI for users to review their flashcards, providing ratings and seeing session progress.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "6-10h",
          "estimated_effort_hours_min": 6,
          "estimated_effort_hours_max": 10,
          "completion_criteria_summary": "CLI allows users to review a session of cards, input ratings, and see these persisted via ReviewSessionManager; basic progress and instructions are clear.",
          "activity_type": "ui_development_cli",
          "recommended_block": "deep_work",
          "deliverables": [
            "flashcore/cli/review_ui.py",
            "tests/cli/test_review_ui.py"
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "Flashcore MVP - CLI Review UI",
          "csm_tags": [
            "flashcore",
            "cli",
            "review"
          ]
        },
        "labels": [
          "project_dev",
          "component:flashcore",
          "epic:mvp",
          "type:ui_dev_cli",
          "module:review_ui",
          "priority:high",
          "block:deep_work",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 23,
        "title": "[Flashcore] Implement Anki and Markdown Exporters",
        "description": "Develop modules to export flashcard data to Anki (via .apkg) and plain Markdown formats to support data backup and interoperability.",
        "details": "1. In `flashcore/exporters/anki_exporter.py`, implement `AnkiExporter` using the `genanki` library to create .apkg files. Include options for deck name and card templates. \n2. In `flashcore/exporters/markdown_exporter.py`, implement `MarkdownExporter` to convert cards to a user-friendly Markdown format (e.g., Q: Front / A: Back). \n3. Ensure both exporters can take a list of `Card` objects or fetch from `FlashcardDatabase`. \n4. Include comprehensive type hints, docstrings, and logging.",
        "testStrategy": "• Unit tests in `tests/exporters/test_anki_exporter.py` and `test_markdown_exporter.py` using pytest. \n  - Test Anki export with `genanki` by creating a small package and verifying its structure (or mock `genanki` calls). \n  - Test Markdown export by verifying output string format for various card contents. \n• Manual testing: Export a small set of cards and verify Anki import and Markdown readability.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement AnkiExporter using genanki",
            "description": "Develop `flashcore.exporters.anki_exporter.AnkiExporter` to generate .apkg files from card data. Handle card model/template definition and media packaging.",
            "dependencies": [],
            "status": "pending",
            "risks": "`genanki` dependency might have breaking changes. Media file path resolution might be complex.",
            "mitigation": "Pin the `genanki` version in `requirements.txt`. Write a dedicated utility function to resolve and copy media files to a temporary location for packaging.",
            "implementation_details": {
              "steps": [
                "1. Define a custom `genanki.Model` with fields for `Front`, `Back`, `UUID`, and `Tags`.",
                "2. Implement a method to fetch all cards from the database.",
                "3. Loop through cards, creating a `genanki.Note` for each.",
                "4. For each note, identify media files and add them to the `genanki.Package`'s media list.",
                "5. Group notes into decks based on the `deck_name` hierarchy.",
                "6. Write the final `genanki.Package` to an `.apkg` file."
              ],
              "testing": [
                "Verify that the generated `.apkg` file is a valid zip archive.",
                "Test with a card that has multiple media files.",
                "Test deck names with `::` separators are correctly handled."
              ]
            }
          },
          {
            "id": 2,
            "title": "Implement MarkdownExporter",
            "description": "Develop `flashcore.exporters.markdown_exporter.MarkdownExporter` to convert cards to a clear and readable Markdown format.",
            "dependencies": [],
            "status": "pending",
            "risks": "Complex Markdown or KaTeX in cards might render poorly without a proper viewer.",
            "mitigation": "The exporter will focus on creating structurally correct Markdown. The user is responsible for using a capable viewer. Add a comment at the top of the exported file about recommended viewers.",
            "implementation_details": {
              "steps": [
                "1. Define a clear Markdown template for a single card (e.g., using `Q: ...`, `A: ...`, and `---` as a separator).",
                "2. Fetch all cards, grouped by deck, from the database.",
                "3. Iterate through decks, writing a top-level heading (e.g., `# Deck Name`).",
                "4. Iterate through cards in the deck, appending the formatted Markdown to a string buffer.",
                "5. Write the final string to a `.md` file."
              ],
              "testing": [
                "Verify the output for a card containing code blocks and KaTeX.",
                "Test that the deck hierarchy is correctly represented with Markdown headings."
              ]
            }
          },
          {
            "id": 3,
            "title": "Write unit tests for both exporters",
            "description": "Create comprehensive unit tests for Anki and Markdown exporters, covering output format and data integrity.",
            "dependencies": [
              1,
              2
            ],
            "status": "pending"
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/outputs/deep_work_candidates/task_plans/flashcore_plan.json",
          "csm_id": "DW_FC_EXPORT_001_002",
          "anchor_link": null
        },
        "hpe_learning_meta": {
          "task_objective_summary": "Implement Anki and Markdown exporters for flashcard data to support data backup and interoperability.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "6-10h",
          "estimated_effort_hours_min": 6,
          "estimated_effort_hours_max": 10,
          "completion_criteria_summary": "Exporters for Anki (.apkg) and Markdown are functional, produce valid output, and are unit tested.",
          "activity_type": "feature_implementation_exporter",
          "recommended_block": "focused_dev_block",
          "deliverables": [
            "flashcore/exporters/anki_exporter.py",
            "flashcore/exporters/markdown_exporter.py",
            "tests/exporters/test_anki_exporter.py",
            "tests/exporters/test_markdown_exporter.py"
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "Flashcore MVP - Exporters",
          "csm_tags": [
            "flashcore",
            "exporter",
            "anki",
            "markdown"
          ]
        },
        "labels": [
          "project_dev",
          "component:flashcore",
          "epic:mvp",
          "type:feature_exporter",
          "module:exporters",
          "priority:medium",
          "block:focused_dev_block",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 22,
        "title": "[Flashcore] Finalize Flashcore CLI Tool (`tm-fc`) with Typer/Click",
        "description": "Create a main entry point `tm-fc` (using Typer or Click) and wrap all completed MVP functionality (card ingest, review sessions, data export, stats) into a unified set of subcommands.",
        "details": "1. In `flashcore/cli/main.py`, define the main `tm-fc` Typer application.\n2. Implement subcommand `tm-fc ingest`: This will wrap the logic from `ingest_flashcards.py`.\n3. Implement subcommand `tm-fc review`: This will call `flashcore.cli.review_ui.start_review_flow` and accept options like `--limit`.\n4. Implement subcommand `tm-fc export anki`: This will call the `AnkiExporter`.\n5. Implement subcommand `tm-fc export md`: This will call the `MarkdownExporter`.\n6. Implement subcommand `tm-fc stats`: Displays basic statistics like total cards and due cards.\n7. Ensure `--help` messages are clear for all commands and subcommands.\n8. Configure `pyproject.toml` to make `tm-fc` an installable script/entry point.",
        "testStrategy": "• Manual testing of all subcommands and their options (e.g., `tm-fc --help`, `tm-fc review --limit 10`, `tm-fc export anki --output-path ...`).\n• Verify that each subcommand correctly invokes the underlying logic (review manager, exporters, ingest script) and produces the expected output or behavior.\n• Test error handling for invalid subcommands or options.\n• Verify `pyproject.toml` script installation.",
        "status": "pending",
        "dependencies": [
          21,
          23
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Setup main CLI structure with Typer",
            "description": "Create `flashcore/cli/main.py` with the basic `tm-fc` app structure and `pyproject.toml` entry point.",
            "dependencies": [],
            "status": "pending",
            "risks": "Dependency conflicts with Typer or its dependencies.",
            "mitigation": "Add `typer[all]` to `requirements.txt` and run `pip check` to ensure a clean environment."
          },
          {
            "id": 2,
            "title": "Implement `ingest` and `stats` subcommands",
            "description": "Wrap the existing ingest script and use ReviewSessionManager for stats.",
            "dependencies": [
              1
            ],
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Implement `review` subcommand",
            "description": "Integrate the review UI flow (from Task 21) into a subcommand, with options like `--limit`.",
            "dependencies": [
              1
            ],
            "status": "pending",
            "risks": "Passing options like `--limit` to the underlying `ReviewSessionManager` requires modifying its `start_session` method, which could be a breaking change.",
            "mitigation": "Carefully refactor `ReviewSessionManager` to accept optional filter parameters and update its tests accordingly."
          },
          {
            "id": 4,
            "title": "Implement `export` subcommand group",
            "description": "Create the `export` group with `anki` and `md` sub-subcommands calling the completed exporters.",
            "dependencies": [
              1
            ],
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Add comprehensive --help messages and conduct manual E2E testing",
            "description": "Ensure all commands and subcommands have clear help text and perform thorough manual testing of the full CLI.",
            "dependencies": [
              2,
              3,
              4
            ],
            "status": "pending"
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/outputs/deep_work_candidates/task_plans/flashcore_plan.json",
          "csm_id": "DW_FC_CLI_WRAP"
        },
        "hpe_learning_meta": {
          "task_objective_summary": "To finalize the `tm-fc` CLI tool by integrating all core MVP functionalities (ingest, review, export, stats) into a single, cohesive interface.",
          "estimated_effort_tshirt": "M",
          "estimated_effort_hours_raw": "5-8h",
          "estimated_effort_hours_min": 5,
          "estimated_effort_hours_max": 8,
          "completion_criteria_summary": "`tm-fc` command is installable and provides fully working subcommands for `ingest`, `review`, `export`, and `stats`. Help messages are functional.",
          "activity_type": "cli_development_integration",
          "recommended_block": "focused_dev_block"
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "Flashcore MVP - CLI Finalization",
          "csm_tags": [
            "flashcore",
            "cli",
            "integration",
            "typer"
          ]
        },
        "labels": [
          "project_dev",
          "component:flashcore",
          "epic:mvp",
          "type:cli_dev_integration",
          "module:main_cli",
          "priority:medium",
          "block:focused_dev_block",
          "effort_tshirt:M"
        ]
      },
      {
        "id": 24,
        "title": "[Task 16] Unify JARC-Reactor Logging",
        "description": "Consolidate all log outputs (lightning_logs, app logs, test logs) from the jarc_reactor system into a unified directory under cultivation/systems/arc_reactor/logs/",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "[EPIC] JARC-Reactor: Foundational Refactor & Bug Squashing",
        "description": "This foundational epic addresses all critical bugs, inconsistencies, and architectural weaknesses identified in the JARC-Reactor codebase audit. The objective is to transform the platform from a 'brittle expert tool' into a stable, reliable, and trustworthy research platform, thereby enabling confident and efficient experimentation for the ARC Prize sprint. This task is a mandatory prerequisite for all subsequent training and HPO activities.",
        "status": "pending",
        "dependencies": [
          16
        ],
        "priority": "critical",
        "details": "A thorough audit of the JARC-Reactor codebase revealed several critical flaws that undermine its reliability, including a silent data-corrupting bug in the evaluation pipeline (dtype mismatch), confusing and redundant logic for Kaggle submission generation, and unexplained 'magic number' heuristics in the core model. This epic is designed to systematically remediate these issues, establishing a 'Golden Path' for the core workflow and ensuring that all future work is built on a solid foundation. The successful completion of this task will de-risk the entire 5-month sprint and provide the necessary confidence to build a winning solution.",
        "testStrategy": "The epic is considered complete when all MUST-HAVE subtasks pass their respective definitions of done. The final validation will be a successful end-to-end run of the 'First Light' integration test (`task arc:run-first-light`) on the fully refactored codebase. This run must complete without errors and produce a validation report confirming system stability, data integrity, and correctness of the generated artifacts.",
        "subtasks": [
          {
            "id": "25.1",
            "title": "Unify Data Pipeline & Fix Critical `dtype` Bug",
            "description": "Refactor data/data_preparation.py and data/eval_data_prep.py into a single, unified module. This new module must be configurable for 'train'/'eval' modes and MUST resolve the critical dtype mismatch bug, ensuring all grid tensors are output as `torch.long`.",
            "status": "pending",
            "dependencies": [],
            "risks": "Refactoring data loaders could introduce subtle bugs affecting how context pairs or synthetic data are handled.",
            "mitigation": "The new data integrity tests (Subtask 25.2) are the primary mitigation. Additionally, perform a manual diff of the output from the old vs. new pipeline on a single, representative task file to ensure logical equivalence, ignoring the intended dtype change.",
            "implementation_details": {
              "steps": [
                "1. Analyze `cultivation/systems/arc_reactor/jarc_reactor/data/eval_data_prep.py` to identify the logic that incorrectly casts tensors to `torch.float32`.",
                "2. Modify `cultivation/systems/arc_reactor/jarc_reactor/data/data_preparation.py` to accept a `mode` parameter (e.g., 'train', 'eval').",
                "3. Port the evaluation-specific logic into the unified function, ensuring all tensor outputs are consistently cast to `torch.long`.",
                "4. Delete the now-redundant `cultivation/systems/arc_reactor/jarc_reactor/data/eval_data_prep.py` file.",
                "5. Refactor `MyDataModule` in `cultivation/systems/arc_reactor/jarc_reactor/data/data_module.py` to call the single, unified data preparation function for both training and validation/testing stages."
              ],
              "testing": [
                "File `cultivation/systems/arc_reactor/jarc_reactor/data/eval_data_prep.py` is verified as DELETED.",
                "The `MyDataModule` is confirmed to call only the new unified function.",
                "The automated data integrity tests created in Subtask 25.2 pass, confirming the `dtype` is `torch.long`."
              ]
            }
          },
          {
            "id": "25.2",
            "title": "Implement Data Integrity Unit Tests & Integrate into CI",
            "description": "Implement new unit tests in `tests/` to validate the unified data loading pipeline's output. These tests must explicitly check tensor dtypes (`torch.long`) and shapes to prevent future regressions. Integrate these tests into the `arc:test` Taskfile command.",
            "status": "pending",
            "dependencies": [
              "25.1"
            ],
            "risks": "Tests might be too brittle if they rely on specific data files; they should be robust to changes in the dummy data.",
            "mitigation": "Use the dedicated, static dummy ARC task file at `cultivation/systems/arc_reactor/jarc_reactor/tests/data/dummy_training_data/dummy_arc_task.json` as a stable input for the tests.",
            "implementation_details": {
              "steps": [
                "1. Create a new test file: `cultivation/systems/arc_reactor/jarc_reactor/tests/test_data_pipeline.py`.",
                "2. In the new test file, write a `pytest` test function that instantiates `MyDataModule` using a Hydra config override to point to the dummy data directory.",
                "3. Call `data_module.setup()` and `data_module.train_dataloader()`.",
                "4. In the test, iterate one batch from the dataloader.",
                "5. Assert that the `dtype` of the source and target grid tensors is `torch.long`.",
                "6. Assert that the shape of the tensors is as expected (e.g., `[B, 30, 30]`).",
                "7. Ensure the `Taskfile.yml`'s `arc:test` target correctly discovers and runs this new test file."
              ],
              "testing": [
                "The new test file (e.g., `tests/test_data_pipeline.py`) is created and committed.",
                "Running `task arc:test` executes the new tests.",
                "The new tests pass successfully in the CI workflow."
              ]
            }
          },
          {
            "id": "25.3",
            "title": "Consolidate Submission Generation Logic",
            "description": "Deprecate redundant submission logic in `evaluate.py` and `kaggle/kaggle_submission.py`. Refactor the system to use `kaggle/submission_handler.py` as the single, canonical source for creating `submission.json` files.",
            "status": "pending",
            "dependencies": [],
            "risks": "The padding removal and grid formatting logic is complex; centralizing it might break edge cases handled by one of the old implementations.",
            "mitigation": "Before deleting old code, create a small suite of test cases with various prediction grid shapes and padding patterns. Ensure the new canonical `SubmissionManager` passes all these test cases.",
            "implementation_details": {
              "steps": [
                "1. Identify `cultivation/systems/arc_reactor/jarc_reactor/kaggle/submission_handler.py` as the canonical module.",
                "2. Refactor `evaluate.py` to import and call the `SubmissionManager` from the canonical module, removing its local `create_submission` implementation.",
                "3. Refactor `kaggle/kaggle_submission.py` to also use the canonical `SubmissionManager`, ensuring consistency.",
                "4. Create a new test file `tests/kaggle/test_submission_handler.py` with test cases for padding removal and correct JSON formatting."
              ],
              "testing": [
                "`kaggle/submission_handler.py` is verified as the single source of truth.",
                "A `git diff` confirms that redundant submission generation code has been removed from all other files.",
                "The `evaluate.py` script successfully generates a submission file using the new handler."
              ]
            }
          },
          {
            "id": "25.4",
            "title": "Investigate & Remove Arbitrary Model Scaling",
            "description": "Remove the `output = output * 5.0` line from `models/transformer_model.py`. Perform a brief experimental run (`fast_dev_run`) to ensure that removing it does not catastrophically destabilize training.",
            "status": "pending",
            "dependencies": [],
            "risks": "Removing the scaling factor significantly destabilizes training, indicating a deeper, undiagnosed issue with loss scaling or gradient flow.",
            "mitigation": "Time-box the investigation to 4 hours. If no root cause is found, revert the change, add a detailed `# TODO` comment explaining the issue, and create a new low-priority tech debt task. Do not let this block the epic.",
            "implementation_details": {
              "steps": [
                "1. Locate and comment out the `output = output * 5.0` line in `cultivation/systems/arc_reactor/jarc_reactor/models/transformer_model.py`.",
                "2. Run a `fast_dev_run` training cycle: `task arc:run-first-light training.fast_dev_run=true`.",
                "3. Monitor the `val_loss` in the output. It must show a clear downward trend.",
                "4. If stable, permanently delete the line and commit with a message documenting the stability check. If unstable, revert and add a detailed `# TODO` comment."
              ],
              "testing": [
                "The line `output = output * 5.0` is confirmed as removed from `transformer_model.py`.",
                "The log from a `fast_dev_run` training cycle is reviewed and confirms a decreasing loss curve."
              ]
            }
          },
          {
            "id": "25.5",
            "title": "[STRETCH] Decompose `EvaluationManager` Class",
            "description": "If time permits, decompose the `EvaluationManager` 'God Object' in `evaluate.py` into smaller, single-responsibility classes (e.g., `EvaluationRunner`, `ReportGenerator`) to improve maintainability.",
            "status": "pending",
            "dependencies": [
              "25.1",
              "25.3"
            ],
            "risks": "The refactor proves more complex than anticipated and threatens the timeline for MUST-HAVE fixes.",
            "mitigation": "Strictly adhere to this being a stretch goal. Defer immediately if any higher-priority subtasks encounter delays.",
            "implementation_details": {
              "steps": [
                "1. Create a new file `evaluation/runner.py` for an `EvaluationRunner` class.",
                "2. Create a new file `evaluation/reporting.py` for a `ReportGenerator` class.",
                "3. Move the evaluation loop logic from `EvaluationManager` into `EvaluationRunner`.",
                "4. Move the JSON/summary file generation logic into `ReportGenerator`.",
                "5. Refactor the `evaluate.py` entry point script to orchestrate these new, smaller classes."
              ],
              "testing": [
                "The `EvaluationManager` class is confirmed as removed and replaced by 2-3 smaller classes.",
                "The public-facing functionality and outputs of the `evaluate.py` script are confirmed to be identical to the pre-refactor version."
              ]
            }
          },
          {
            "id": "25.6",
            "title": "Final Validation: E2E Integration Test & Documentation Update",
            "description": "Run the full 'First Light' integration test (`task arc:run-first-light`) on the refactored codebase to ensure all components work together correctly. Update the `README.md` and other relevant docs to reflect the new, simplified 'Golden Path' workflow.",
            "status": "pending",
            "dependencies": [
              "25.1",
              "25.2",
              "25.3",
              "25.4"
            ],
            "risks": "An unforeseen integration error emerges only when all refactored components run together.",
            "mitigation": "Run the test with a debugger attached. Analyze logs from the full run to trace the error. Be prepared to revisit and patch previous subtasks.",
            "implementation_details": {
              "steps": [
                "1. After all other MUST-HAVE subtasks are complete, run `task arc:run-first-light` from the project root.",
                "2. Verify that the run completes without any Python errors and that a model checkpoint and TensorBoard log file are generated in the `.../first_light_test/` directory.",
                "3. Update `cultivation/systems/arc_reactor/README.md` to describe the new, unified workflow for training, evaluation, and submission."
              ],
              "testing": [
                "The command `task arc:run-first-light` completes successfully without errors.",
                "A model checkpoint and a TensorBoard log file are generated and their contents are briefly inspected for validity.",
                "The project's main `README.md` is updated to describe the new, canonical workflow."
              ]
            }
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/WORK_IN_PROGRESS/GEORGE_System_Analysis_Report_2025-06-18.md",
          "csm_id": "DW_ARC_JR_FIX_001",
          "anchor_link": "#executive-summary"
        },
        "hpe_learning_meta": {
          "task_objective_summary": "To transform the JARC-Reactor from a brittle expert tool into a stable, reliable, and trustworthy research platform by remediating all critical bugs and architectural flaws identified in the codebase audit.",
          "estimated_effort_tshirt": "L",
          "estimated_effort_hours_raw": "2-4 days",
          "estimated_effort_hours_min": 16,
          "estimated_effort_hours_max": 32,
          "mastery_criteria_summary": "Data integrity is validated by CI tests. Submission generation is unified. The 'First Light' integration test passes on the refactored codebase without errors, and the README is updated to reflect the new canonical workflow.",
          "activity_type": "refactoring_bug_fixing_testing",
          "recommended_block": "deep_work",
          "deliverables": [
            "A unified data loading module in `cultivation/systems/arc_reactor/jarc_reactor/data/data_preparation.py`.",
            "New data integrity unit tests passing in CI (`tests/test_data_pipeline.py`).",
            "A single, canonical submission handler in `cultivation/systems/arc_reactor/jarc_reactor/kaggle/submission_handler.py`.",
            "A final validation report confirming system stability post-refactor."
          ],
          "actionable_advice_for_execution": "1. **Tackle Subtasks Sequentially:** Follow the dependency chain: 25.1 -> 25.2. Subtasks 25.3 and 25.4 can be done in parallel. Subtask 25.6 is the final integration test.\n2. **Commit Atomically:** Create a separate, focused Git commit for each completed subtask. This isolates changes and makes the PR easy to review.\n3. **Test-Driven Refactoring:** For subtask 25.3 (Submission Logic), write the new unit tests first. These tests should initially fail. Then, refactor the code until the tests pass. This ensures correctness.\n4. **Time-Box Heuristic Investigation:** Strictly adhere to the 4-hour time box for subtask 25.4. Its priority is lower than fixing the data bugs. If it proves difficult, document it and move on to ensure the epic is not blocked."
        },
        "hpe_scheduling_meta": {
          "curriculum_part_title": "ARC Sprint: P0 - Foundational Refactor",
          "csm_tags": [
            "arc_sprint",
            "jarc_reactor",
            "refactoring",
            "bug_fix",
            "tech_debt",
            "track_a",
            "data_integrity",
            "code_health",
            "epic"
          ]
        },
        "labels": [
          "domain:arc_sprint",
          "component:ia_layer",
          "activity:refactoring",
          "block:deep_work",
          "effort_tshirt:L",
          "track:A",
          "priority:critical"
        ]
      },
      {
        "id": 26,
        "title": "[EPIC] Refactor Running Data Pipeline to V2.0",
        "description": "A foundational architectural refactoring of the `cultivation/running` scripts to improve robustness, testability, and performance. This addresses significant technical debt and de-risks future development.",
        "status": "pending",
        "dependencies": [
          14
        ],
        "priority": "critical",
        "details": "The current running data pipeline is a brittle, script-based system with tight filesystem coupling, duplicated logic, and decentralized configuration. This epic initiative will re-architect the pipeline into an industrial-grade, configuration-driven, and highly-testable software component. The goal is to create a reliable engine that can be extended with confidence, enabling advanced features like predictive modeling and deeper integration with the Holistic Integration Layer (HIL). This is a MUST-HAVE technical debt-repayment initiative, as specified in the 'Running Data Pipeline V2.0' PRD.",
        "testStrategy": "Success is validated by a multi-faceted approach, enforced by the CI pipeline: \n1. **Unit Testing:** All new, pure-logic utility functions must achieve >85% line coverage with `pytest`.\n2. **Regression Testing:** A 'Golden Dataset' test must be created. The refactored pipeline MUST produce numerically identical output artifacts (plots, summaries, dataframes, text files) to the old pipeline for a canonical run file, ensuring no logical regressions are introduced.\n3. **Data Contract Validation:** Key DataFrames at critical pipeline stages (e.g., post-parsing, pre-analysis) must be validated against `pandera` schemas to ensure data integrity.\n4. **Performance Benchmarking:** The final parallelized pipeline must show a >40% speedup for a benchmark set of 20 runs.",
        "subtasks": [
          {
            "id": "26.1",
            "title": "Centralize Configuration & Consolidate Logic",
            "description": "Eliminate all hardcoded parameters and duplicated utility functions by creating a single source of truth for configuration and consolidating shared logic into a central utility module. This is the first step to reduce code sprawl and improve maintainability.",
            "status": "pending",
            "dependencies": [],
            "risks": "A hardcoded parameter (e.g., a pace threshold) is missed during the refactor, leading to subtle bugs where part of the system uses the new config and another part uses an old, hidden default.",
            "mitigation": "Perform a project-wide search for all numeric literals and string constants related to thresholds (e.g., pace, cadence, HR). Systematically replace each one with a call to the new config loader. The 'Golden Dataset' regression test (implemented in a later subtask) will be the final backstop to catch any missed values that alter the output.",
            "implementation_details": {
              "steps": [
                "1. **Create the new package structure:** `mkdir -p cultivation/running/utils` and add `__init__.py` to `cultivation/running/` and `cultivation/running/utils/` to make them proper Python packages.",
                "2. Create a new file `cultivation/running/config.py` and define a dictionary or dataclass `RUNNING_CONFIG` to hold all parameters from `metrics.py`, `parse_run_files.py`, `fatigue_watch.py`, etc.",
                "3. The config MUST include the cadence auto-scaling threshold (e.g., `cadence_rpm_to_spm_threshold: 100`) to explicitly preserve this domain logic.",
                "4. Create a `load_config()` function in this module.",
                "5. Rename and move all core utility scripts to the `utils` package: `detect_strides_temp.py` -> `utils/stride_detection.py`, `metrics.py` -> `utils/physiological_metrics.py`, `walk_utils.py` -> `utils/walk_processing.py`.",
                "6. The core architectural shift is from script-based `subprocess` calls to a Python-native pipeline. This subtask prepares for that by consolidating logic into importable modules.",
                "7. Refactor all relevant utility scripts to import `load_config` and retrieve parameters from it instead of using local constants.",
                "8. Remove the duplicated `detect_strides` function from `run_performance_analysis.py` and replace it with an import from the new canonical utility module.",
                "9. Remove the redundant HR drift calculation from `run_performance_analysis.py`."
              ],
              "testing": [
                "Create a new test file `tests/running/test_config.py` and write a unit test for the `load_config()` function.",
                "Create a new test file `tests/running/test_stride_detection.py` and write unit tests for the consolidated `detect_strides` utility.",
                "Add a concrete integration test for the config. Example: Write a test that calls the `walk_detection` logic. Pass it a mock DataFrame where a point has a pace of 11.5 min/km. First, test with the default config and assert the point is classified as a walk. Then, pass a mock config object where `walk_pace_min_per_km` is set to `12.0` and assert the same point is now classified as a run. This proves the config is correctly wired up and respected by the business logic."
              ]
            }
          },
          {
            "id": "26.2",
            "title": "Implement Data Schemas & Core Logic Unit Tests",
            "description": "Define explicit data contracts for key DataFrames using `pandera`. Create a comprehensive unit test suite for the pure logic that was consolidated in the previous step.",
            "status": "pending",
            "dependencies": [
              "26.1"
            ],
            "risks": "Pandera schemas are initially too strict or too loose, causing failures on valid edge-case data or allowing errors to pass through.",
            "mitigation": "Develop schemas iteratively. First, use `pandera.infer_schema` on existing, valid processed CSV files to generate a baseline. Then, manually refine the schema to add specific constraints (e.g., ranges, non-nullability). Test against multiple historical run files.",
            "implementation_details": {
              "steps": [
                "1. Create `cultivation/running/schemas.py` and define a `pandera.DataFrameSchema` for the main processed run DataFrame (the output of parsing a GPX/FIT file).",
                "2. Ensure the schema validates column names, dtypes, and sensible ranges (e.g., latitude between -90 and 90).",
                "3. Create `tests/running/test_metrics.py` and write `pytest` unit tests for the pure logic functions in `utils/physiological_metrics.py` (e.g., `_haversine`, hrTSS calculation). Use `pytest.mark.parametrize` to test with known inputs and expected outputs.",
                "4. Aim for >85% test coverage on these pure utility functions."
              ],
              "testing": [
                "Verify that the new `pandera` schemas can successfully validate a known-good processed run file.",
                "Verify that the CI `task test` command runs the new unit tests and that they pass."
              ]
            }
          },
          {
            "id": "26.3",
            "title": "Implement Core `RunningSession` Class",
            "description": "Create the central object-oriented structure, the `RunningSession` class, which will encapsulate the state and processing logic for a single run, migrating logic from the old procedural scripts.",
            "status": "pending",
            "dependencies": [
              "26.2"
            ],
            "risks": "The class design becomes a monolithic 'God Object' that is difficult to manage and test.",
            "mitigation": "Maintain a strict separation of concerns. The `RunningSession` class should be an *orchestrator*. Its methods should be high-level (e.g., `.calculate_metrics()`, `.generate_visualizations()`) and should call the pure utility functions (from `utils/`) for the actual computation. It should hold state, but delegate complex logic.",
            "implementation_details": {
              "steps": [
                "1. Create `cultivation/running/session.py` and implement the `RunningSession` class.",
                "2. The `__init__` method should accept a raw file path and the central config object.",
                "3. In the `__init__` method, implement logic to detect if a corresponding `_hr_override.gpx` file exists. If so, set the internal file path to the override file. This preserves existing data correction functionality.",
                "4. Implement a `.load_and_parse()` method that contains the logic from `parse_run_files.py` to load a GPX/FIT file into an internal DataFrame (`self.raw_df`).",
                "5. Implement a `.segment_run_walk()` method that uses the walk detection logic on the DataFrame.",
                "6. Implement a `.calculate_all_metrics()` method that calls the pure `run_metrics` function and stores the results in `self.metrics`.",
                "7. Implement a `.generate_outputs(output_dir)` method to orchestrate the creation of plots and text summaries.",
                "8. Implement a main `.process(output_dir)` method that calls the other methods in sequence.",
                "9. In the appropriate methods, use the `pandera` schemas from subtask 26.2 to validate the internal DataFrames."
              ],
              "testing": [
                "Create `tests/running/test_session.py` and write unit tests for the `RunningSession` class methods, mocking file I/O using `pyfakefs` or `pytest-mock`'s `mock_open`."
              ]
            }
          },
          {
            "id": "26.4",
            "title": "Refactor Orchestrator & Implement Golden Dataset Test",
            "description": "Rewrite the main orchestrator script (`process_all_runs.py`) to use the new `RunningSession` class. Implement the critical 'Golden Dataset' regression test to ensure end-to-end correctness and prevent regressions.",
            "status": "pending",
            "dependencies": [
              "26.3"
            ],
            "risks": "The refactored pipeline produces numerically different results due to subtle changes in data handling (e.g., floating point precision, `pandas` operation changes).",
            "mitigation": "The Golden Dataset test is the primary mitigation. Use `pandas.testing.assert_frame_equal` for DataFrames and file diffs with a reasonable tolerance for floating-point comparisons. Log any differences meticulously during test development to ensure they are understood and acceptable.",
            "implementation_details": {
              "steps": [
                "1. Refactor `process_all_runs.py` to scan for all raw run files.",
                "2. Implement logic to identify corresponding `_hr_override.gpx` files and filter out the original base `.gpx` files from the processing list to prevent double-counting runs.",
                "3. Initially, process the `RunningSession` objects in a simple serial loop to validate the class-based logic.",
                "4. Create a new test in `tests/running/test_pipeline_integration.py` for the Golden Dataset test.",
                "5. In a setup step for this test, select a canonical 'golden' run file. A good candidate is a run with diverse features: walking, strides, and some environmental variability (e.g., `20250531_..._LongThreshold...gpx`). Run the *old* pipeline on this file and store all its output artifacts in `tests/golden_files/`.",
                "6. The test will then run the *new* refactored pipeline on the same 'golden' run file. It must perform a deep comparison of the newly generated artifacts against the stored golden master artifacts, asserting numerical and structural equivalence.",
                "7. This comparison should be implemented as a helper function that recursively traverses the golden and new output directories, comparing files by content hash (for images) and with tolerance-based diffs (for CSV/TXT), and asserting that no unexpected files were created or omitted.",
                "8. Update the `run:process-runs` command in `Taskfile.yml` to point to the new, refactored orchestrator script, ensuring the user-facing command is seamless.",
                "9. Add a new target to `Taskfile.yml`, e.g., `task run:process-single-file -- <file_path>`, which allows the new orchestrator to be invoked for a single file, preserving developer utility for debugging and re-analysis."
              ],
              "testing": [
                "The Golden Dataset test passing in CI is the primary acceptance criterion for this subtask."
              ]
            }
          },
          {
            "id": "26.5",
            "title": "[SHOULD] Parallelize Orchestrator & Integrate Aggregation",
            "description": "Improve pipeline performance by processing multiple runs in parallel. Integrate the weekly aggregation step to ensure the longitudinal dataset is always up-to-date automatically.",
            "status": "pending",
            "dependencies": [
              "26.4"
            ],
            "risks": "Parallel processing can introduce race conditions, especially with file I/O, or make debugging difficult due to interleaved log outputs.",
            "mitigation": "Design the worker function (that processes a single `RunningSession`) to be completely stateless. It should only take a file path and config, and all its outputs should be written to a unique, per-run directory to avoid any conflicts. Use a robust logging setup that can handle multiprocessing.",
            "implementation_details": {
              "steps": [
                "1. In the refactored orchestrator, modify the main loop to use Python's `multiprocessing.Pool` to distribute the `RunningSession.process()` calls across multiple cores.",
                "2. Define a top-level worker function that can be pickled by `multiprocessing`.",
                "3. The worker function must be wrapped in a `try...except` block. In case of an exception for a single file, it should log the error and return a failure status, allowing the main process to report on failures without halting the entire batch.",
                "4. After all parallel jobs complete successfully, add a final step to the orchestrator that calls the `aggregate_weekly_runs` logic to update `weekly_metrics.parquet`.",
                "5. Benchmark the new parallel pipeline against the old sequential one on a set of 20 files to verify the >40% performance improvement."
              ],
              "testing": [
                "Successful completion of a batch run with parallel processing.",
                "Verification that `weekly_metrics.parquet` is updated correctly after the run.",
                "A documented benchmark test showing the performance improvement.",
                "As part of this, a simple test should load the newly generated `weekly_metrics.parquet` and assert that it contains the expected columns (`ef_mean`, `decoupling_mean`, `km`, `rpe_avg`) required by downstream analysis or scheduling systems."
              ]
            }
          },
          {
            "id": "26.6",
            "title": "[SHOULD] Abstract External Service Interactions",
            "description": "Decouple the pipeline from specific external tools and APIs by creating dedicated client classes. This improves modularity and testability.",
            "status": "pending",
            "dependencies": [],
            "risks": "The new client abstractions are 'leaky' and do not fully encapsulate the complexity of the underlying tool or API, making them hard to use or mock.",
            "mitigation": "Design the clients with a simple, clean interface that hides implementation details. For example, the `GitHubClient` should have a method `.create_issue(title, body)` and should handle the `subprocess` call internally. Ensure the clients can be easily mocked in tests.",
            "implementation_details": {
              "steps": [
                "1. Create a `cultivation/utils/github_client.py` module with a `GitHubClient` class that wraps the `subprocess` call to the `gh` CLI.",
                "2. Refactor `fatigue_watch.py` to instantiate and use this client instead of calling `subprocess` directly.",
                "3. Create a `cultivation/running/utils/weather.py` module by refactoring the existing `weather_utils.py`. Wrap the logic in a `WeatherClient` class, making the caching mechanism an internal detail.",
                "4. Refactor the `RunningSession` class to use this new `WeatherClient`."
              ],
              "testing": [
                "Write unit tests for the new clients, mocking the `subprocess` and `requests` calls to test their internal logic.",
                "Write a unit test for `fatigue_watch.py`'s main logic. Create mock DataFrames for wellness data that are designed to trigger the alert rules. Pass a mocked `GitHubClient` instance to the function and assert that its `.create_issue()` method is called with the expected title and body."
              ]
            }
          },
          {
            "id": "26.7",
            "title": "[COULD] Add Package-Level Documentation",
            "description": "Create a `README.md` for the new `cultivation/running` package explaining its new object-oriented architecture, data flow, and usage. Ensure all new public classes and functions have clear docstrings.",
            "status": "pending",
            "dependencies": [
              "26.5"
            ],
            "risks": "Documentation becomes outdated if written too early in the process.",
            "mitigation": "This task is scheduled after the core implementation is complete to ensure the documentation reflects the final state of the refactored code.",
            "implementation_details": {
              "steps": [
                "1. Create `cultivation/running/README.md`.",
                "2. In the README, add sections for: Overview, Architecture (describing the `RunningSession` class), Configuration (`config.py`), and How to Run.",
                "3. Review all new modules (`session.py`, `config.py`, `utils/*.py`) and add clear, concise docstrings to all public classes and functions."
              ],
              "testing": [
                "The `README.md` file is present and contains the required sections.",
                "A manual review confirms docstrings are present on key public APIs."
              ]
            }
          },
          {
            "id": "26.8",
            "title": "[COULD] Final Cleanup of Obsolete Scripts",
            "description": "Once the new object-oriented pipeline is validated and stable, remove the old, superseded procedural scripts from `cultivation/scripts/running/` to prevent confusion and reduce code clutter.",
            "status": "pending",
            "dependencies": [
              "26.7"
            ],
            "risks": "A piece of logic from an old script was missed during the refactor, and deleting the script removes the only implementation.",
            "mitigation": "The 'Golden Dataset' test (26.4) is the primary mitigation. Before deletion, move the old scripts to a temporary `cultivation/scripts/running/archive/` directory for one full release cycle. If no issues arise, they can be safely deleted.",
            "implementation_details": {
              "steps": [
                "1. Create a temporary `archive` directory inside `cultivation/scripts/running/`.",
                "2. Move scripts like `parse_run_files.py`, `run_performance_analysis.py`, `analyze_hr_pace_distribution.py`, etc., into the archive directory.",
                "3. Run the full test suite (`task test`) again to ensure no broken dependencies.",
                "4. After a period of stability (e.g., one week of successful runs), delete the archive directory."
              ],
              "testing": [
                "The project's test suite passes after the old scripts are moved/deleted.",
                "The `task run:process-runs` command continues to function correctly, using only the new refactored code."
              ]
            }
          }
        ],
        "hpe_csm_reference": {
          "source_document": "cultivation/docs/2_requirements_and_specifications/running_pipeline_v2_prd.md",
          "csm_id": "DW_RUN_PIPE_REFACTOR_001",
          "anchor_link": "#executive-summary"
        },
        "hpe_learning_meta": {
          "learning_objective_summary": null,
          "task_objective_summary": "To transform the brittle, script-based running pipeline into a robust, object-oriented, testable, configuration-driven, and performant system, eliminating critical technical debt and enabling future scalability.",
          "estimated_effort_tshirt": "XL",
          "estimated_effort_hours_raw": "24-42 hours (4-7 Deep Work Days)",
          "estimated_effort_hours_min": 24,
          "estimated_effort_hours_max": 42,
          "mastery_criteria_summary": "Pipeline is fully refactored into a class-based system, passes all unit tests (>85% coverage), validates data against schemas, runs >40% faster in parallel, and produces numerically identical results to the legacy pipeline for a 'golden dataset'.",
          "activity_type": "systems_engineering_refactoring",
          "recommended_block": "deep_work",
          "deliverables": [
            "A new `RunningSession` class encapsulating single-run processing.",
            "A central `config.py` for all running parameters.",
            "A parallelized pipeline orchestrator in `process_all_runs.py`.",
            "A comprehensive `pytest` suite for core logic and a 'Golden Dataset' regression test.",
            "Explicit `pandera` schemas for data validation.",
            "Abstracted clients for GitHub and Weather APIs."
          ]
        },
        "hpe_scheduling_meta": {
          "planned_day_of_week": null,
          "curriculum_part_title": "P1: Core Systems Refactoring",
          "csm_tags": [
            "p1_foundations",
            "refactoring",
            "running_pipeline",
            "tech_debt",
            "core_dev",
            "ia_layer",
            "testing",
            "performance"
          ]
        },
        "labels": [
          "domain:running",
          "component:pipeline",
          "activity:refactoring",
          "block:deep_work",
          "effort_tshirt:XL",
          "priority:critical",
          "epic"
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-16T21:05:48.595Z",
      "updated": "2025-06-21T05:02:36.707Z",
      "description": "Tasks for master context"
    }
  }
}