# Task ID: 16
# Title: Integrate jarc_reactor Codebase & Establish ARC Sprint Environment
# Status: pending
# Dependencies: None
# Priority: high

# Description:
Epic foundational task for Track A of the ARC Prize sprint: transform jarc-reactor from an external asset into a fully integrated, quality-assured, and testable component of the Cultivation project, establishing the baseline for all future ARC Prize work.

# Details:
This task is the cornerstone of the ARC Prize sprint, activating the baseline, enforcing Cultivation's Infrastructure & Automation (IA) Layer standards, and providing the testbed for all future ARC experimentation.

Strategic Purpose:
- De-risk the sprint by establishing a robust, operational baseline.
- Enforce code quality and prevent technical debt from day one.
- Provide a stable, standardized platform for all future R&D.

Dependency Graph (see mermaid diagram in project docs):
16.1 → 16.2 → 16.3 → (16.4 & 16.6) → 16.5 → 16.7

See subtasks for detailed risk analysis, mitigation strategies, and workflow guidance.

# Test Strategy:
Definition of Done (Checklist):
1. Confirm jarc_reactor has been properly integrated using git subtree with full history preserved.
2. Verify all dependencies are harmonized in the root requirements.txt with no conflicts.
3. Validate IA Layer compliance through pre-commit hooks and code standards.
4. Ensure ARC dataset is properly configured and accessible.
5. Check that documentation is complete and accurate.
6. Verify CI workflow is implemented and functioning.
7. Confirm successful end-to-end training cycle on ARC data.

# HPE Learning Meta (Main Task):
    Learning objective summary: To establish a robust, standardized, and well-understood development environment for `jarc-reactor` as the foundation for the ARC Prize sprint.
    Estimated effort tshirt: L
    Estimated effort hours raw: 3-5 days
    Estimated effort hours min: 15
    Estimated effort hours max: 25
    Mastery criteria summary: jarc-reactor environment is fully set up, IA standards are applied, and a baseline training run on ARC data completes successfully.
    Activity type: systems_integration_devops_setup
    Recommended block: deep_work
    Deliverables: ['Configured `jarc-reactor` dev environment within Cultivation.', 'Updated `Taskfile.yml` with `arc:*` targets.', 'Functional `arc-reactor-ci.yml` GitHub Actions workflow.', 'Documentation for the integrated system (`README.md`).', "A final validation report from the 'First Light' integration test."]
    Actionable advice for execution: 1.  **Commit Atomically:** As you complete each subtask, create a separate, atomic Git commit. This will make your work easy to review and, if necessary, revert. E.g., `feat(arc): [16.1] Integrate jarc-reactor via git subtree`, `refactor(arc): [16.1] Refactor internal import paths`.
2.  **Follow the Dependency Chain:** Execute the subtasks in the defined order, taking advantage of the parallelization opportunity for 16.4 and 16.5.
3.  **Use Taskmaster to Track Progress:** As you start and finish each subtask, update its status using `task-master set-status --id <subtask_id> --status <done|in-progress>`. This maintains a live record of your progress through this epic.
4.  **Embrace the `PYTHONPATH` Bridge (Temporarily):** Do not get bogged down for days on subtask 16.1's import refactoring. If it proves difficult, implement the `PYTHONPATH` workaround in your `Taskfile.yml`, document it as tech debt, and move on to subtasks 16.2 and 16.3 to maintain momentum. You can circle back to the full refactor later.
# Subtask Details:

## Subtask 16.1: Structure Repo: `git subtree` & Import Path Refactoring
Description: Use `git subtree` to merge jarc_reactor into `cultivation/systems/arc_reactor/` with full history. Then, refactor all internal Python import paths to be absolute from the `cultivation` root, or bridge temporarily with PYTHONPATH in Taskfile targets.
Dependencies: None
Status: done
Risks: Refactoring all import paths is time-consuming and error-prone. A single missed import can break the entire system.
Mitigation: Use an IDE with project-wide refactoring tools. Create a specific test commit after refactoring and run all tests. Consider the PYTHONPATH bridge as a temporary measure to unblock other subtasks if refactoring proves too complex initially.
HPE Learning Meta:
    Estimated effort hours min: 2.5
    Estimated effort hours max: 5
    Recommended block: deep_work
Implementation Steps:
  1. Use `git subtree` to merge the `jarc_reactor` repository into `cultivation/systems/arc_reactor/`, preserving its entire commit history
  2. Update all internal Python import paths to be absolute from the `cultivation` root
  3. Ensure proper directory structure within the Cultivation project
  4. Add appropriate README documentation explaining the integration
  5. Ensure .gitignore is updated to handle any new patterns
Testing Approach:
  - Verify the repository structure is correct
  - Ensure all files are properly integrated with history preserved
  - Check that import paths are correctly updated to use absolute paths
  - Confirm documentation is clear and accurate

## Subtask 16.2: Harmonize Dependencies
Description: Analyze `jarc-reactor/requirements.txt`, merge dependencies into the root `requirements.txt`. Resolve version conflicts by defaulting to the newer version, then validate the unified environment using `pip check` and by running both projects' test suites.
Dependencies: 1
Status: done
Risks: A newer dependency version required by Cultivation breaks a critical function in jarc-reactor, leading to extensive debugging ('dependency hell').
Mitigation: Immediately run both test suites after merging requirements. If major breaks occur, use `pipdeptree` to analyze the conflict and be prepared to pin a specific dependency to an older, compatible version as a short-term fix, creating a follow-up tech debt task.
HPE Learning Meta:
    Estimated effort hours min: 1
    Estimated effort hours max: 4
    Recommended block: deep_work

## Subtask 16.3: Implement IA Layer Compliance
Description: Run `pre-commit run --all-files` and fix all `black`, `ruff`, and `isort` issues. Refactor all `logging` calls to use the Cultivation project's standard logger. Add `arc:lint` and `arc:test` targets to the root `Taskfile.yml`.
Dependencies: 2
Status: done
Risks: The initial pre-commit run may generate thousands of changes, making the commit noisy and hard to review.
Mitigation: Perform the automated formatting in a single, isolated commit with a clear message (e.g., 'style: Apply pre-commit formatting to arc_reactor'). Then, perform the manual logging refactor in a separate commit.
HPE Learning Meta:
    Estimated effort hours min: 1.5
    Estimated effort hours max: 3
    Recommended block: focused_dev_block
Clarification: IA stands for Infrastructure & Automation in the Cultivation context.

## Subtask 16.4: Configure ARC Dataset Environment
Description: Download the official ARC dataset to `cultivation/data/raw/arc_prize_2025/`. Create an override config file for `jarc-reactor` pointing to this path. Audit and adapt `jarc-reactor`'s data loaders to parse the official ARC JSON format.
Dependencies: 3
Status: pending
Risks: The official ARC dataset structure has subtle differences from what `jarc-reactor`'s data loaders expect, requiring significant refactoring of `data_preparation.py`.
Mitigation: Start by writing a small, standalone script to parse just one ARC task file. Once that works, integrate the logic into the main data loader. Test with a diverse sample of at least 10-15 ARC tasks.
HPE Learning Meta:
    Estimated effort hours min: 2
    Estimated effort hours max: 5
    Recommended block: deep_work

## Subtask 16.5: Create CI Workflow
Description: Implement `arc-reactor-ci.yml` GitHub Actions workflow. Configure it to run `arc:lint` and `arc:test` targets. Trigger workflow only on changes to relevant paths (e.g., `cultivation/systems/arc_reactor/**`) for efficiency.
Dependencies: 4, 6
Status: done
Risks: CI environment has pathing or caching issues not present locally.
Mitigation: Use `act` to test workflow locally if possible. Add extensive logging and debug steps to the CI file during initial setup.
HPE Learning Meta:
    Estimated effort hours min: 1
    Estimated effort hours max: 2.5
    Recommended block: focused_dev_block
Implementation Steps:
  1. Create a new GitHub Actions workflow file (`arc-reactor-ci.yml`)
  2. Configure the workflow to run the new `arc:lint` and `arc:test` targets on relevant PRs
  3. Set up appropriate triggers for the workflow
  4. Configure proper caching of dependencies to speed up CI runs
  5. Ensure the workflow provides clear feedback on failures
  6. Test the workflow with both passing and failing scenarios
Testing Approach:
  - Create test PRs to verify the workflow triggers correctly
  - Introduce deliberate linting errors to verify detection
  - Introduce test failures to verify proper reporting
  - Check that the workflow completes in a reasonable time
  - Verify caching is working as expected
Refinement: Use `on.<push/pull_request>.paths` in the workflow file to limit triggers.

## Subtask 16.6: Document Integrated System
Description: Create `cultivation/systems/arc_reactor/README.md`. As a living document, it should explain the integrated setup, how to use the new Taskfile targets, and the ARC dataset configuration.
Dependencies: 3
Status: done
Risks: Documentation becomes outdated as other subtasks are completed.
Mitigation: Draft the README early, but perform a final pass to update it as the very last step before the 'First Light' test.
HPE Learning Meta:
    Estimated effort hours min: 0.5
    Estimated effort hours max: 1.5
    Recommended block: flex-slot

## Subtask 16.7: Perform "First Light" Integration Test
Description: Execute a complete, short, end-to-end training cycle on a small subset of ARC data using the `task arc:run-baseline` target. Success is defined as the run completing without errors and saving a model checkpoint. Document the process and results in a concise validation report.
Dependencies: 6
Status: done
Risks: An unforeseen integration error emerges only when all components run together.
Mitigation: Run with a debugger attached. Analyze logs from the full run to trace the error. Be prepared to revisit and patch previous subtasks.
HPE Learning Meta:
    Estimated effort hours min: 1
    Estimated effort hours max: 4
    Recommended block: deep_work
Implementation Steps:
  1. Run a short, end-to-end training cycle on a small subset of ARC data
  2. Confirm the entire integrated system functions without errors
  3. Verify that the system successfully saves a model checkpoint
  4. Analyze logs for any warnings or potential issues
  5. Document the test process and results
  6. Create a validation report with performance metrics
Testing Approach:
  - Select a representative subset of ARC tasks for the test
  - Monitor system resource usage during the test
  - Validate that checkpoints are properly saved and can be loaded
  - Check that all components interact correctly through the IA layer
  - Document any issues discovered and their resolutions
  - Create a final integration report documenting the system's readiness
