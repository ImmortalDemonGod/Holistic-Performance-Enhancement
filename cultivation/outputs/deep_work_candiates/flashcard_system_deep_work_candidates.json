[
  {
    "task_id_candidate": "DW_001",
    "tentative_title": "Implement Author-First Flashcard Authoring and Compilation Workflow",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "1·Design principles, 4·Author workflow"}
    ],
    "description_objective": "Develop a workflow and supporting tools that allow users to author flashcards as easily as editing Markdown, with YAML as the canonical source, and automate compilation to all required formats (DuckDB, Anki, Markdown).",
    "primary_type": "System Development (Workflow & Tooling)",
    "initial_scale_estimate": "Large (1-5 days)",
    "potential_deliverables_outcomes": [
      "Markdown/YAML authoring templates and snippets",
      "Automated build scripts for compiling flashcards to all target formats",
      "Documentation for the authoring process and build pipeline"
    ],
    "implicit_reasoning_confidence": "N/A (Explicitly derived from design principles)",
    "notes_questions_dependencies": "Depends on existing or new Python tooling for YAML parsing and export. Should integrate with VS Code snippet system."
  },
  {
    "task_id_candidate": "DW_002",
    "tentative_title": "Develop Robust YAML Schema Validation for Flashcards",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "3·YAML schema"}
    ],
    "description_objective": "Implement a schema validator for flashcard YAML files, enforcing field types, constraints, forbidden content, and providing clear error messages for authors.",
    "primary_type": "Algorithm Development & Tooling",
    "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
    "potential_deliverables_outcomes": [
      "Python-based YAML schema validator",
      "Unit tests for all validation rules",
      "Integration with CI pipeline"
    ],
    "implicit_reasoning_confidence": "N/A (Explicitly derived from schema section)",
    "notes_questions_dependencies": "Should run in <2s for CI. Needs to catch security issues (secrets, XSS, forbidden tags)."
  },
  {
    "task_id_candidate": "DW_003",
    "tentative_title": "Implement Flashcard Build and Export Pipeline (DuckDB, Anki, Markdown)",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "2·Folder layout, 3·YAML schema"}
    ],
    "description_objective": "Develop Python scripts to ingest YAML flashcards, assign UUIDs, and export to DuckDB, Anki (.apkg via genanki), and Markdown, ensuring all outputs are reproducible and version-controlled.",
    "primary_type": "Feature Implementation (Data Pipeline)",
    "initial_scale_estimate": "Large (1-5 days)",
    "potential_deliverables_outcomes": [
      "build_cards.py script for YAML→DuckDB",
      "export_anki.py and export_markdown.py scripts",
      "Automated tests for each export format"
    ],
    "implicit_reasoning_confidence": "High (Folder layout and schema imply this pipeline)",
    "notes_questions_dependencies": "Requires genanki or similar for Anki export. Must not edit dist/ or historical files by hand."
  },
  {
    "task_id_candidate": "DW_004",
    "tentative_title": "Design and Implement Security Measures for Flashcard Authoring and Export",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "1·Design principles, 3·YAML schema"}
    ],
    "description_objective": "Develop mechanisms to detect and prevent inclusion of secrets, XSS vectors, proprietary data, and forbidden tags in flashcard content throughout the authoring and export process.",
    "primary_type": "System Design & Implementation (Security)",
    "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
    "potential_deliverables_outcomes": [
      "Static analysis for secrets and forbidden content",
      "CI checks for security violations",
      "Documentation of security model"
    ],
    "implicit_reasoning_confidence": "N/A (Explicitly required by design principles)",
    "notes_questions_dependencies": "Should integrate with schema validation and build pipeline."
  },
  {
    "task_id_candidate": "DW_005",
    "tentative_title": "Design and Implement Modular Question Bank System",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_2.md", "section": "1. Components Overview - Question Bank / Repository"}
    ],
    "description_objective": "Develop a flexible, extensible question bank module supporting multiple formats (YAML, JSON, Python dict), multiple question types (flashcard, short-answer, coding, reflection), and metadata for each question.",
    "primary_type": "System Development (Data Modeling & API)",
    "initial_scale_estimate": "Large (1-5 days)",
    "potential_deliverables_outcomes": [
      "Question bank data model and storage format(s)",
      "APIs for loading, querying, and updating questions",
      "Support for all required question types and metadata"
    ],
    "implicit_reasoning_confidence": "N/A (Explicitly described in design)",
    "notes_questions_dependencies": "Should be extensible for future question types and integrate with authoring workflow."
  },
  {
    "task_id_candidate": "DW_006",
    "tentative_title": "Build Session Manager and Timing Manager Core Logic",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_2.md", "section": "1. Components Overview - Session Manager, Timing Manager"}
    ],
    "description_objective": "Implement the core logic for managing test sessions, including session initialization, progress tracking, question selection, and enforcing per-question time constraints.",
    "primary_type": "Feature Implementation (Application Logic)",
    "initial_scale_estimate": "Large (1-5 days)",
    "potential_deliverables_outcomes": [
      "Session management module with progress tracking",
      "Timing manager that enforces configurable time limits per question type",
      "Unit tests for session and timing edge cases"
    ],
    "implicit_reasoning_confidence": "N/A (Explicitly described in design)",
    "notes_questions_dependencies": "Should allow for future extension to whole-session time limits and advanced scheduling."
  },
  {
    "task_id_candidate": "DW_007",
    "tentative_title": "Develop Multi-Interface User Interaction Layer (Console, GUI, Web)",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_2.md", "section": "1. Components Overview - User Interface"}
    ],
    "description_objective": "Design and implement a user interaction layer that supports console, GUI (Tkinter/PyQt), and web (Flask/Django) interfaces, each capable of displaying questions, timers, and collecting responses.",
    "primary_type": "System Design & Implementation (UI/UX)",
    "initial_scale_estimate": "Epic (multi-week/month, needs breakdown)",
    "potential_deliverables_outcomes": [
      "Console-based CLI interface",
      "Prototype GUI (Tkinter/PyQt) interface",
      "Prototype web interface (Flask/Django)",
      "Documentation and UI usage examples"
    ],
    "implicit_reasoning_confidence": "High (UI extensibility is implied and partially explicit)",
    "notes_questions_dependencies": "Consider modular design for pluggable UI backends. Prioritize console implementation first for MVP."
  },
  {
    "task_id_candidate": "DW_008",
    "tentative_title": "Implement Answer Capture, Storage, and Analytics Pipeline",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_2.md", "section": "1. Components Overview - Answer Capture & Storage, Analytics / Reporting"}
    ],
    "description_objective": "Build a robust pipeline for capturing user responses, storing all relevant metadata, and providing analytics and reporting on performance, timing, and error patterns.",
    "primary_type": "Feature Implementation (Data Engineering & Analytics)",
    "initial_scale_estimate": "Large (1-5 days)",
    "potential_deliverables_outcomes": [
      "Answer capture and storage module (CSV/JSON/SQLite)",
      "Analytics engine for session data",
      "Reporting tools for user feedback and progress tracking"
    ],
    "implicit_reasoning_confidence": "N/A (Explicit in requirements)",
    "notes_questions_dependencies": "Ensure privacy and security of stored data. Should be extensible for future analytics."
  },
  {
    "task_id_candidate": "DW_009",
    "tentative_title": "Develop Auto-Grading and Manual Evaluation Framework",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_2.md", "section": "1. Components Overview - Evaluation / Scoring Module"}
    ],
    "description_objective": "Implement a flexible evaluation module supporting auto-grading for flashcards and multiple-choice, keyword checks for short answers, and manual/partial automation for coding and reflection questions.",
    "primary_type": "Algorithm Development & Tooling",
    "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
    "potential_deliverables_outcomes": [
      "Auto-grading logic for flashcards and MCQs",
      "Keyword-based evaluation for short answers",
      "Hooks for manual review and code evaluation"
    ],
    "implicit_reasoning_confidence": "Medium (partially explicit, some design required)",
    "notes_questions_dependencies": "Design for extensibility to new question types and grading rubrics."
  },
  {
    "task_id_candidate": "DW_010",
    "tentative_title": "Synthesize and Author Canonical Literature Review on Knowledge Dimensions",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_3.md", "section": "The Four Dimensions of Human Knowledge"}
    ],
    "description_objective": "Conduct a comprehensive literature review on declarative, procedural, conceptual, and metacognitive knowledge, covering definitions, theoretical foundations, empirical findings (post-2010), and unresolved issues, culminating in a reference document for the flashcard system.",
    "primary_type": "Research & Content Creation",
    "initial_scale_estimate": "Epic (multi-week/month, needs breakdown)",
    "potential_deliverables_outcomes": [
      "Comprehensive literature review document",
      "Annotated bibliography of key sources",
      "Summary tables of definitions, measures, and findings"
    ],
    "implicit_reasoning_confidence": "N/A (Explicitly described in doc)",
    "notes_questions_dependencies": "Should inform flashcard schema, assessment design, and instructional content. May require collaboration with subject matter experts."
  },
  {
    "task_id_candidate": "DW_011",
    "tentative_title": "Develop Assessment Framework for Declarative, Procedural, Conceptual, and Metacognitive Knowledge",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_3.md", "section": "Assessment Tools and Measures"}
    ],
    "description_objective": "Design a robust assessment framework and item bank for each knowledge dimension, including quizzes, open-ended explanations, concept inventories, scenario-based and calibration tasks, and concept mapping, with validity and reliability evidence.",
    "primary_type": "System Design (Assessment & Psychometrics)",
    "initial_scale_estimate": "Large (1-5 days)",
    "potential_deliverables_outcomes": [
      "Assessment item bank for each knowledge type",
      "Rubrics and scoring guides",
      "Validation studies and reliability reports"
    ],
    "implicit_reasoning_confidence": "High (directly derived from doc)",
    "notes_questions_dependencies": "Should integrate with flashcard authoring and self-assessment tools. May require piloting and psychometric analysis."
  },
  {
    "task_id_candidate": "DW_012",
    "tentative_title": "Integrate Knowledge Dimension Taxonomy into Flashcard System Schema",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_3.md", "section": "Integration Points"}
    ],
    "description_objective": "Extend the flashcard YAML schema and authoring workflow to tag each card with its primary knowledge dimension(s) and support cross-linking between declarative, conceptual, procedural, and metacognitive items.",
    "primary_type": "System Design & Data Modeling",
    "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
    "potential_deliverables_outcomes": [
      "Updated YAML schema and authoring guidelines",
      "Migration scripts for existing cards",
      "Documentation of taxonomy and usage examples"
    ],
    "implicit_reasoning_confidence": "Medium (inferred from integration discussion)",
    "notes_questions_dependencies": "Requires consensus on taxonomy. Should be extensible for strategic knowledge if adopted."
  },
  {
    "task_id_candidate": "DW_013",
    "tentative_title": "Design and Implement Multi-Method Knowledge Assessment Pipeline",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_3.md", "section": "Assessment Tools and Measures, Integration Points"}
    ],
    "description_objective": "Develop a pipeline that combines multiple assessment methods (quizzes, open-ended, concept mapping, calibration) for holistic measurement of learner knowledge, and generates actionable analytics.",
    "primary_type": "Feature Implementation (Data Engineering & Analytics)",
    "initial_scale_estimate": "Large (1-5 days)",
    "potential_deliverables_outcomes": [
      "Assessment pipeline integrating multiple data sources",
      "Analytics dashboard for learner profiles",
      "Reporting tools for instructors and learners"
    ],
    "implicit_reasoning_confidence": "Medium (integration implied by doc)",
    "notes_questions_dependencies": "Should interface with answer capture and analytics modules. Requires data privacy and security review."
  },
  {
    "task_id_candidate": "DW_014",
    "tentative_title": "Design and Implement Anki Add-on for External Backend Integration",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_4.md", "section": "Core Idea: Anki as a 'Dumb' Review Interface"}
    ],
    "description_objective": "Develop a robust Anki add-on that syncs card content and scheduling from the custom YAML/DuckDB/FSRS backend, captures review actions in Anki, and writes results back to the backend for scheduling and analytics.",
    "primary_type": "Full-Stack Integration & Plugin Development",
    "initial_scale_estimate": "Epic (multi-week, multi-component)",
    "potential_deliverables_outcomes": [
      "Anki add-on with card sync, review logging, and due date override",
      "Documentation for setup and usage",
      "Test suite for integration scenarios"
    ],
    "implicit_reasoning_confidence": "High (explicitly described in doc)",
    "notes_questions_dependencies": "Requires deep familiarity with Anki's API and Python environment. Must handle concurrency and error cases robustly."
  },
  {
    "task_id_candidate": "DW_015",
    "tentative_title": "Architect and Implement Two-Way Data Flow Between Anki and Custom Backend",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_4.md", "section": "Anki Add-on Components and Workflow"}
    ],
    "description_objective": "Establish a reliable, efficient two-way (or one-way with reconciliation) data synchronization protocol between Anki and the YAML/DuckDB backend, including card creation/update, review event capture, and scheduling synchronization.",
    "primary_type": "System Architecture & Protocol Design",
    "initial_scale_estimate": "Large (multi-day, requires careful breakdown)",
    "potential_deliverables_outcomes": [
      "Synchronization protocol specification",
      "Implementation of sync logic in add-on and backend scripts",
      "Automated tests for data integrity and error handling"
    ],
    "implicit_reasoning_confidence": "Medium (implied by design outline)",
    "notes_questions_dependencies": "Must address mapping of UUIDs, due dates, and review ratings. Needs locking/concurrency safeguards for DuckDB."
  },
  {
    "task_id_candidate": "DW_016",
    "tentative_title": "Extend Flashcore Python Backend for FSRS Review Processing and Anki Integration",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_4.md", "section": "External FSRS Processing (Your System)"}
    ],
    "description_objective": "Enhance the flashcore backend to process Anki review logs, update FSRS scheduling parameters, and maintain the DuckDB as the authoritative source for all review and scheduling data.",
    "primary_type": "Backend Feature Implementation",
    "initial_scale_estimate": "Medium (1-2 deep work sessions)",
    "potential_deliverables_outcomes": [
      "Python scripts for FSRS review processing",
      "Automated update of next_due and stability parameters",
      "Integration tests with Anki add-on"
    ],
    "implicit_reasoning_confidence": "High (explicitly described in doc)",
    "notes_questions_dependencies": "Must ensure idempotency, handle initial state, and provide robust error reporting."
  },
  {
    "task_id_candidate": "DW_017",
    "tentative_title": "Develop Concurrency and Data Integrity Safeguards for DuckDB/Anki Sync",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_4.md", "section": "Challenges and Considerations"}
    ],
    "description_objective": "Design and implement locking or transaction mechanisms to prevent data corruption and ensure consistent state when both Anki and backend scripts access DuckDB.",
    "primary_type": "Infrastructure & Reliability Engineering",
    "initial_scale_estimate": "Medium (1-2 deep work sessions)",
    "potential_deliverables_outcomes": [
      "Lock file or transaction protocol for DuckDB access",
      "Documentation and integration with all sync scripts",
      "Test suite for race conditions and failure recovery"
    ],
    "implicit_reasoning_confidence": "Medium (explicitly described as a challenge)",
    "notes_questions_dependencies": "Must work cross-platform and not impede UX. Should be extensible for future multi-user scenarios."
  },
  {
    "task_id_candidate": "DW_HPE_003",
    "tentative_title": "Develop `flashcore` Python Package for Flashcard System (MVP)",
    "source_reference": [
      {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "Folder layout, Build pipeline"},
      {"file": "cultivation/scripts/biology/flashcards_playground.ipynb", "section": "Prototyped logic"}
    ],
    "description_objective": "Develop the `flashcore` Python package as specified in `flashcards_1.md`. This includes: YAML parsing, `Card` object model, DuckDB schema creation (`cards`, `reviews` tables), `build_cards.py` (YAML to DuckDB ingest/upsert), `export_anki.py` (DuckDB to .apkg), `export_markdown.py` (DuckDB to Markdown). Implement basic FSRS logic from `flashcards_playground.ipynb` for scheduling.",
    "primary_type": "System Development (Python Package)",
    "initial_scale_estimate": "Epic (multi-week/month, needs breakdown)",
    "potential_deliverables_outcomes": [
      "Installable `flashcore` Python package.",
      "CLI tools (`tm-fc vet`, `tm-fc add` - stubs initially).",
      "Functional `build_cards.py`, `export_anki.py`, `export_markdown.py` scripts.",
      "DuckDB database `flash.db` created and populated from sample YAML.",
      "Sample Anki deck and Markdown file generated."
    ],
    "implicit_reasoning_confidence": "N/A (Explicitly derived from design docs)",
    "notes_questions_dependencies": "Requires `genanki`, `pyyaml`, `duckdb`, `pandas`, `markdown`. Decision needed on full FSRS implementation scope for MVP vs. simplified version from notebook."
  },
    {
      "task_id_candidate": "DW_FLASHSYS_001",
      "tentative_title": "Implement Core FSRS Scheduling Logic in `flashcore.scheduler`",
      "source_reference": [
        {"file": "cultivation/scripts/biology/flashcards_playground (1).py", "section": "fsrs_once function"},
        {"file": "cultivation/scripts/flashcore/scheduler.py", "section": "Stub file"},
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "Build pipeline (implies scheduling for review)"}
      ],
      "description_objective": "Port, refine, and integrate the FSRS (Free Spaced Repetition Scheduler) algorithm into `flashcore.scheduler.py`. This module should take a card's review history and a new rating to calculate its next review date, stability, and difficulty, updating the `Review` object accordingly. Aim for compatibility with standard FSRS principles.",
      "primary_type": "Algorithm Development & Implementation",
      "initial_scale_estimate": "Large (1-5 days)",
      "potential_deliverables_outcomes": [
        "Functional `flashcore.scheduler.FSRSAlgorithm` class or equivalent functions.",
        "Ability to calculate new `stab_after`, `diff`, and `next_due` for a given `Review` event.",
        "Unit tests for FSRS calculations covering various scenarios (first review, subsequent reviews, different ratings).",
        "Documentation of the FSRS parameters and implementation choices."
      ],
      "implicit_reasoning_confidence": "High (Core requirement for an SRS)",
      "notes_questions_dependencies": "Depends on `flashcore.card.Review` model. Initial version can be based on `fsrs_once` from playground, then enhanced. Needs decision on FSRS parameterization (default vs. user-tunable)."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_002",
      "tentative_title": "Develop Review Session Management in `flashcore.review_manager`",
      "source_reference": [
        {"file": "cultivation/scripts/flashcore/review_manager.py", "section": "Stub file"},
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "CLI (`tm-fc review --gui`)"},
        {"file": "cultivation/scripts/flashcore/database.py", "section": "`get_due_cards` method"}
      ],
      "description_objective": "Implement the `ReviewSession` class or equivalent logic in `flashcore.review_manager.py`. This module should: 1. Fetch due cards from `FlashcardDatabase` using `get_due_cards`. 2. Present cards to the user (initially via a CLI interface). 3. Capture user rating. 4. Invoke `flashcore.scheduler` to update card state. 5. Save the new `Review` object to the database.",
      "primary_type": "System Development (Application Logic)",
      "initial_scale_estimate": "Large (1-5 days)",
      "potential_deliverables_outcomes": [
        "Functional `ReviewSession` logic.",
        "Basic CLI-based review interface.",
        "Integration with `FlashcardDatabase` for fetching due cards and saving reviews.",
        "Integration with `flashcore.scheduler` for FSRS updates.",
        "End-to-end tests for a complete review cycle."
      ],
      "implicit_reasoning_confidence": "High (Core requirement for an SRS)",
      "notes_questions_dependencies": "Depends on DW_FLASHSYS_001 (FSRS scheduler). Initial UI can be text-based CLI."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_003",
      "tentative_title": "Implement Anki Exporter (`flashcore.exporters.anki_exporter`)",
      "source_reference": [
        {"file": "cultivation/scripts/flashcore/exporters/anki_exporter.py", "section": "Stub file"},
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "Build pipeline (export_anki.py)"}
      ],
      "description_objective": "Develop the Anki exporter module. This script should query the DuckDB database for all cards (or cards from specified decks), transform them into Anki's format (using the `genanki` library), and generate `.apkg` files. Handle media embedding and tag conversion.",
      "primary_type": "Feature Implementation (Exporter)",
      "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
      "potential_deliverables_outcomes": [
        "Functional `anki_exporter.py` script.",
        "Ability to generate `.apkg` files from the DuckDB.",
        "Support for basic card fields (front, back, tags) and media.",
        "Tests for Anki deck generation."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified in design)",
      "notes_questions_dependencies": "Requires `genanki` library. Decision on how to handle deck hierarchies in Anki."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_004",
      "tentative_title": "Implement Markdown Exporter (`flashcore.exporters.markdown_exporter`)",
      "source_reference": [
        {"file": "cultivation/scripts/flashcore/exporters/markdown_exporter.py", "section": "Stub file"},
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "Build pipeline (export_markdown.py)"}
      ],
      "description_objective": "Develop the Markdown exporter module. This script should query the DuckDB database and generate human-readable Markdown files (e.g., one file per deck, or a single large file) representing the flashcards, suitable for browsing or printing.",
      "primary_type": "Feature Implementation (Exporter)",
      "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
      "potential_deliverables_outcomes": [
        "Functional `markdown_exporter.py` script.",
        "Readable Markdown output of flashcards.",
        "Options for structuring output (e.g., by deck).",
        "Tests for Markdown generation."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified in design)",
      "notes_questions_dependencies": "Decision on Markdown formatting (e.g., using Q: A: format, or headings)."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_005",
      "tentative_title": "Develop `tm-fc` Command-Line Interface Suite",
      "source_reference": [
        {"file": "cultivation/scripts/flashcards_cli.py", "section": "Stub file"},
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "Author Workflow, CLI cheat-sheet"}
      ],
      "description_objective": "Implement the main `tm-fc` CLI entry point and its subcommands (`vet`, `add`, `review`, etc.) as outlined in `flashcards_1.md`. This CLI will orchestrate calls to `flashcore` modules (yaml_processor, review_manager, exporters). `ingest_flashcards.py` could be refactored into a `tm-fc ingest` subcommand.",
      "primary_type": "System Development (CLI)",
      "initial_scale_estimate": "Large (1-5 days)",
      "potential_deliverables_outcomes": [
        "Functional `tm-fc` CLI with subcommands: `add` (manual card creation), `vet` (YAML lint/sort/dedupe - this is complex), `review` (invoking review session), `ingest` (from YAML to DB).",
        "Integration with underlying `flashcore` modules.",
        "User documentation for CLI commands.",
        "CLI tests."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified in design)",
      "notes_questions_dependencies": "Requires other `flashcore` modules to be functional. `tm-fc vet` is a significant feature involving YAML modification."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_006",
      "tentative_title": "Implement Pre-Commit Hooks for Flashcard Authoring Workflow",
      "source_reference": [
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "4·Author workflow"}
      ],
      "description_objective": "Set up pre-commit hooks that automatically run `tm-fc vet` on staged YAML flashcard files. This includes injecting UUIDs, alpha-sorting deck content (cards by front?), and de-duplicating identical question fronts within a file.",
      "primary_type": "Process Automation & Tooling",
      "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
      "potential_deliverables_outcomes": [
        "`.pre-commit-config.yaml` configured for flashcard YAMLs.",
        "The `tm-fc vet` command must be functional and capable of modifying YAML files in place or providing clear diffs.",
        "Documentation for setting up the pre-commit environment."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified)",
      "notes_questions_dependencies": "Depends on DW_FLASHSYS_005 (`tm-fc vet` implementation). Requires careful design for in-place YAML modification to preserve comments and structure."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_007",
      "tentative_title": "Develop Flashcard System CI/CD Workflows",
      "source_reference": [
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "6·CI integration"}
      ],
      "description_objective": "Create GitHub Actions workflows for: 1. Linting: Validating YAML flashcard files on every PR (e.g., running `tm-fc vet --check` or `ingest_flashcards.py --lint-only --strict`). 2. Nightly Build: Running `make flash-sync` (or equivalent sequence of `tm-fc ingest`, `tm-fc export anki`, `tm-fc export md`) and uploading generated `.apkg` and `.md` files as artifacts.",
      "primary_type": "Process Automation (CI/CD)",
      "initial_scale_estimate": "Medium (1-2 full deep work sessions, ~4-8 hours)",
      "potential_deliverables_outcomes": [
        "`.github/workflows/flashcards-lint.yml`.",
        "`.github/workflows/flashcards-nightly-build.yml`.",
        "CI jobs successfully linting YAMLs and generating export artifacts.",
        "Documentation on CI processes."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified)",
      "notes_questions_dependencies": "Depends on functional CLI commands (DW_FLASHSYS_005) and exporters (DW_FLASHSYS_003, DW_FLASHSYS_004). `make flash-sync` needs to be defined in a Makefile."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_008",
      "tentative_title": "Integrate Flashcard System with Task Master",
      "source_reference": [
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "7·Task Master hooks"}
      ],
      "description_objective": "Develop the `scripts/post_task_complete.py` hook (or similar mechanism) to allow Task Master to automatically create flashcards (via `tm-fc add`) when a task description contains `[[fc]]` and is marked done.",
      "primary_type": "System Integration",
      "initial_scale_estimate": "Small (single deep work session, ~2-4 hours)",
      "potential_deliverables_outcomes": [
        "Functional `post_task_complete.py` script or equivalent integration.",
        "Demonstration of flashcard creation from a Task Master task.",
        "Documentation for the `[[fc]]` convention."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified)",
      "notes_questions_dependencies": "Depends on DW_FLASHSYS_005 (`tm-fc add` implementation) and a stable Task Master API/hook mechanism."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_009",
      "tentative_title": "Design and Implement Flashcard Analytics and Dashboard",
      "source_reference": [
        {"file": "cultivation/scripts/flashcore/analytics.py", "section": "Stub file"},
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_1.md", "section": "Roadmap (Superset dashboard)"},
        {"file": "cultivation/scripts/biology/flashcards_playground (1).py", "section": "Analytics on review data"}
      ],
      "description_objective": "Develop analytics functions in `flashcore.analytics.py` to compute metrics like retention rate, number of mature cards, learning streaks, and review load. Create a dashboard (e.g., using Streamlit, or generating static HTML/Markdown reports with plots) to visualize these analytics.",
      "primary_type": "Feature Implementation (Analytics & Visualization)",
      "initial_scale_estimate": "Large (1-5 days)",
      "potential_deliverables_outcomes": [
        "Functional `flashcore.analytics.py` module.",
        "Key learning metrics calculated from DuckDB review data.",
        "Dashboard or report visualizing flashcard statistics and learning progress.",
        "Tests for analytics calculations."
      ],
      "implicit_reasoning_confidence": "High (Roadmap item, prototype exists)",
      "notes_questions_dependencies": "Requires review data in DuckDB. Decision on dashboarding technology (Streamlit vs. static reports)."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_010",
      "tentative_title": "Develop Advanced Self-Assessment Tool (flashcards_2.md vision)",
      "source_reference": [
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_2.md", "section": "Entire document"}
      ],
      "description_objective": "Design and implement the broader self-assessment tool envisioned in `flashcards_2.md`. This includes a modular question bank, session management with timing, various UI frontends (console MVP, then GUI/web), answer capture, and a more sophisticated evaluation/scoring module beyond simple flashcard ratings. This would integrate `flashcore` for its flashcard question type.",
      "primary_type": "System Development (New Application)",
      "initial_scale_estimate": "Epic (multi-week/month, needs breakdown)",
      "potential_deliverables_outcomes": [
        "Question bank module supporting multiple question types.",
        "Session manager with timing and progress tracking.",
        "Console-based self-assessment UI (MVP).",
        "Storage and basic analytics for assessment results.",
        "Integration API for `flashcore` as one question source/type."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified in its own design doc)",
      "notes_questions_dependencies": "This is a large, distinct project that *uses* the flashcard system. Requires careful phasing. `flashcore` needs to be stable first."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_011",
      "tentative_title": "Integrate Knowledge Dimension Tagging and Assessment (flashcards_3.md vision)",
      "source_reference": [
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_3.md", "section": "Entire document"}
      ],
      "description_objective": "Extend the flashcard system (`Card` model, YAML schema, authoring tools, review UI) to support tagging cards with knowledge dimensions (declarative, procedural, conceptual, metacognitive). Develop assessment methods and analytics specific to these dimensions as outlined in the 'Integrated Measurement Framework'.",
      "primary_type": "System Design & Feature Implementation (Advanced Pedagogy)",
      "initial_scale_estimate": "Epic (multi-week/month, needs breakdown)",
      "potential_deliverables_outcomes": [
        "Updated `Card` model and YAML schema to include knowledge dimension tags.",
        "Authoring support for tagging dimensions.",
        "Potentially new review UI elements or assessment types tailored to different dimensions.",
        "Analytics dashboards showing progress per knowledge dimension."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified in its own design doc)",
      "notes_questions_dependencies": "This is a major conceptual and technical extension. Requires deep understanding of the pedagogical framework in `flashcards_3.md` and careful UI/UX design for assessment."
    },
    {
      "task_id_candidate": "DW_FLASHSYS_012",
      "tentative_title": "Develop Anki Add-on for Custom Backend Sync (flashcards_4.md vision)",
      "source_reference": [
        {"file": "cultivation/docs/2_requirements/flashcard_system/flashcards_4.md", "section": "Entire document"}
      ],
      "description_objective": "Implement the Anki add-on described in `flashcards_4.md`. This involves creating Python code within Anki's add-on framework to: 1. Sync card content from `flashcore`'s DuckDB to Anki. 2. Override Anki's scheduling to use `next_due` dates from `flashcore`. 3. Capture review events in Anki and send them back to `flashcore`'s DuckDB. 4. Coordinate with the external FSRS processing script.",
      "primary_type": "Plugin Development & System Integration",
      "initial_scale_estimate": "Epic (multi-week/month, needs breakdown)",
      "potential_deliverables_outcomes": [
        "Functional Anki add-on for two-way (or orchestrated one-way) sync.",
        "Robust handling of data mapping, conflicts, and errors.",
        "Clear documentation for add-on installation and usage.",
        "Comprehensive tests for the sync logic."
      ],
      "implicit_reasoning_confidence": "N/A (Explicitly specified in its own design doc)",
      "notes_questions_dependencies": "Requires deep knowledge of Anki's internal database structure, add-on API, and Python environment. Concurrency and data integrity between Anki and DuckDB are major challenges."
    }
]
